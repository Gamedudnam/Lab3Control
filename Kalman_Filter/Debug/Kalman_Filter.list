
Kalman_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061cc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080063a4  080063a4  000073a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e4  080063e4  000080bc  2**0
                  CONTENTS
  4 .ARM          00000008  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ec  080063ec  000080bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ec  080063ec  000073ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080063f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200000c0  080064b0  000080c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080064b0  00008454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018718  00000000  00000000  000080ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262d  00000000  00000000  00020804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00022e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de6  00000000  00000000  00023fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ab9  00000000  00000000  00024db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017282  00000000  00000000  0004b86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe3cd  00000000  00000000  00062af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160ebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  00160f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00165cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000c0 	.word	0x200000c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800638c 	.word	0x0800638c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000c4 	.word	0x200000c4
 8000214:	0800638c 	.word	0x0800638c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 ff36 	bl	8001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f889 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 fa7d 	bl	8001250 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d56:	f000 f8d1 	bl	8000efc <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d5a:	f000 f9d5 	bl	8001108 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d5e:	f000 fa29 	bl	80011b4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d62:	f000 f915 	bl	8000f90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d66:	213c      	movs	r1, #60	@ 0x3c
 8000d68:	4833      	ldr	r0, [pc, #204]	@ (8000e38 <main+0xf4>)
 8000d6a:	f002 fd7f 	bl	800386c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d6e:	4833      	ldr	r0, [pc, #204]	@ (8000e3c <main+0xf8>)
 8000d70:	f002 faea 	bl	8003348 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <main+0xfc>)
 8000d78:	f002 fbc0 	bl	80034fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4830      	ldr	r0, [pc, #192]	@ (8000e40 <main+0xfc>)
 8000d80:	f002 fbbc 	bl	80034fc <HAL_TIM_PWM_Start>
  Kalman_Start();
 8000d84:	f000 fc68 	bl	8001658 <Kalman_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Voltage = 5.0*PWM/1000.0;
 8000d88:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <main+0x100>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fb95 	bl	80004bc <__aeabi_i2d>
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <main+0x104>)
 8000d98:	f7ff fbfa 	bl	8000590 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <main+0x108>)
 8000daa:	f7ff fd1b 	bl	80007e4 <__aeabi_ddiv>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fdfd 	bl	80009b4 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a24      	ldr	r2, [pc, #144]	@ (8000e50 <main+0x10c>)
 8000dbe:	6013      	str	r3, [r2, #0]

	  if (start == 1)
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <main+0x110>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d109      	bne.n	8000ddc <main+0x98>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM);
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <main+0x100>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <main+0xfc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <main+0xfc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dda:	e00b      	b.n	8000df4 <main+0xb0>
	  }
	  else if (start == 0)
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <main+0x110>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d107      	bne.n	8000df4 <main+0xb0>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <main+0xfc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <main+0xfc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38
	  }

	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <main+0xf4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <main+0x114>)
 8000dfc:	6013      	str	r3, [r2, #0]
	  //Call every 0.1 s
	  static uint64_t timestamp =0;
	  int64_t currentTime = micros();
 8000dfe:	f000 faaf 	bl	8001360 <micros>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8000e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e0e:	4913      	ldr	r1, [pc, #76]	@ (8000e5c <main+0x118>)
 8000e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e14:	4290      	cmp	r0, r2
 8000e16:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e1a:	d2b5      	bcs.n	8000d88 <main+0x44>
	  {
		  timestamp =currentTime + 100000;//us
 8000e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e20:	490f      	ldr	r1, [pc, #60]	@ (8000e60 <main+0x11c>)
 8000e22:	1854      	adds	r4, r2, r1
 8000e24:	f143 0500 	adc.w	r5, r3, #0
 8000e28:	4622      	mov	r2, r4
 8000e2a:	462b      	mov	r3, r5
 8000e2c:	490b      	ldr	r1, [pc, #44]	@ (8000e5c <main+0x118>)
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPosVel_Update();
 8000e32:	f000 fab1 	bl	8001398 <QEIEncoderPosVel_Update>
  {
 8000e36:	e7a7      	b.n	8000d88 <main+0x44>
 8000e38:	200001bc 	.word	0x200001bc
 8000e3c:	20000208 	.word	0x20000208
 8000e40:	20000170 	.word	0x20000170
 8000e44:	20000264 	.word	0x20000264
 8000e48:	40140000 	.word	0x40140000
 8000e4c:	408f4000 	.word	0x408f4000
 8000e50:	20000268 	.word	0x20000268
 8000e54:	2000025c 	.word	0x2000025c
 8000e58:	20000260 	.word	0x20000260
 8000e5c:	20000448 	.word	0x20000448
 8000e60:	000186a0 	.word	0x000186a0

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	@ 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2238      	movs	r2, #56	@ 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 fa5d 	bl	8006332 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f001 f9d6 	bl	8002238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2340      	movs	r3, #64	@ 0x40
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ea6:	2355      	movs	r3, #85	@ 0x55
 8000ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fa70 	bl	80023a0 <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ec6:	f000 fcc5 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fd6e 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eee:	f000 fcb1 	bl	8001854 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	@ 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f00:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f02:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <MX_LPUART1_UART_Init+0x90>)
 8000f04:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f3e:	4812      	ldr	r0, [pc, #72]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f40:	f003 fed4 	bl	8004cec <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f000 fc83 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f52:	f004 fc6f 	bl	8005834 <HAL_UARTEx_SetTxFifoThreshold>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f5c:	f000 fc7a 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f64:	f004 fca4 	bl	80058b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f6e:	f000 fc71 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_LPUART1_UART_Init+0x8c>)
 8000f74:	f004 fc25 	bl	80057c2 <HAL_UARTEx_DisableFifoMode>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f7e:	f000 fc69 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000dc 	.word	0x200000dc
 8000f8c:	40008000 	.word	0x40008000

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	@ 0x70
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2234      	movs	r2, #52	@ 0x34
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 f9b1 	bl	8006332 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8001104 <MX_TIM1_Init+0x174>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000fd8:	22a9      	movs	r2, #169	@ 0xa9
 8000fda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000fe2:	4b47      	ldr	r3, [pc, #284]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000fe4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffc:	4840      	ldr	r0, [pc, #256]	@ (8001100 <MX_TIM1_Init+0x170>)
 8000ffe:	f002 f94b 	bl	8003298 <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 fc24 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001016:	4619      	mov	r1, r3
 8001018:	4839      	ldr	r0, [pc, #228]	@ (8001100 <MX_TIM1_Init+0x170>)
 800101a:	f002 ff19 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001024:	f000 fc16 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001028:	4835      	ldr	r0, [pc, #212]	@ (8001100 <MX_TIM1_Init+0x170>)
 800102a:	f002 fa05 	bl	8003438 <HAL_TIM_PWM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001034:	f000 fc0e 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001044:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001048:	4619      	mov	r1, r3
 800104a:	482d      	ldr	r0, [pc, #180]	@ (8001100 <MX_TIM1_Init+0x170>)
 800104c:	f003 fcde 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001056:	f000 fbfd 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105a:	2360      	movs	r3, #96	@ 0x60
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	4820      	ldr	r0, [pc, #128]	@ (8001100 <MX_TIM1_Init+0x170>)
 8001080:	f002 fdd2 	bl	8003c28 <HAL_TIM_PWM_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800108a:	f000 fbe3 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001092:	2204      	movs	r2, #4
 8001094:	4619      	mov	r1, r3
 8001096:	481a      	ldr	r0, [pc, #104]	@ (8001100 <MX_TIM1_Init+0x170>)
 8001098:	f002 fdc6 	bl	8003c28 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010a2:	f000 fbd7 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM1_Init+0x170>)
 80010e4:	f003 fd28 	bl	8004b38 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80010ee:	f000 fbb1 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM1_Init+0x170>)
 80010f4:	f000 fcac 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 80010f8:	bf00      	nop
 80010fa:	3770      	adds	r7, #112	@ 0x70
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000170 	.word	0x20000170
 8001104:	40012c00 	.word	0x40012c00

08001108 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2224      	movs	r2, #36	@ 0x24
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f90b 	bl	8006332 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001128:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <MX_TIM3_Init+0xa8>)
 800112a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_TIM3_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64511;
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_TIM3_Init+0xa4>)
 800113a:	f64f 32ff 	movw	r2, #64511	@ 0xfbff
 800113e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800114c:	2303      	movs	r3, #3
 800114e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001178:	f002 fad2 	bl	8003720 <HAL_TIM_Encoder_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001182:	f000 fb67 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <MX_TIM3_Init+0xa4>)
 8001194:	f003 fc3a 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800119e:	f000 fb59 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	@ 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001bc 	.word	0x200001bc
 80011b0:	40000400 	.word	0x40000400

080011b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011d4:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <MX_TIM5_Init+0x98>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011da:	22a9      	movs	r2, #169	@ 0xa9
 80011dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_TIM5_Init+0x94>)
 80011fa:	f002 f84d 	bl	8003298 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001204:	f000 fb26 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_TIM5_Init+0x94>)
 8001216:	f002 fe1b 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001220:	f000 fb18 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_TIM5_Init+0x94>)
 8001232:	f003 fbeb 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800123c:	f000 fb0a 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000208 	.word	0x20000208
 800124c:	40000c00 	.word	0x40000c00

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a2e      	ldr	r2, [pc, #184]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <MX_GPIO_Init+0xd4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a22      	ldr	r2, [pc, #136]	@ (8001324 <MX_GPIO_Init+0xd4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <MX_GPIO_Init+0xd4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f000 ff77 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480f      	ldr	r0, [pc, #60]	@ (8001328 <MX_GPIO_Init+0xd8>)
 80012ea:	f000 fde7 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f000 fdd8 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2028      	movs	r0, #40	@ 0x28
 8001312:	f000 fd9e 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001316:	2028      	movs	r0, #40	@ 0x28
 8001318:	f000 fdb5 	bl	8001e86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	@ 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_TIM_PeriodElapsedCallback>:
//}


//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b4b0      	push	{r4, r5, r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d108      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x22>
{
	_micros += UINT32_MAX;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	1e54      	subs	r4, r2, #1
 8001344:	f143 0500 	adc.w	r5, r3, #0
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800134a:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bcb0      	pop	{r4, r5, r7}
 8001356:	4770      	bx	lr
 8001358:	20000208 	.word	0x20000208
 800135c:	20000290 	.word	0x20000290

08001360 <micros>:
uint64_t micros()
{
 8001360:	b4b0      	push	{r4, r5, r7}
 8001362:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <micros+0x2c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	4618      	mov	r0, r3
 800136e:	4611      	mov	r1, r2
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <micros+0x30>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	1884      	adds	r4, r0, r2
 8001378:	eb41 0503 	adc.w	r5, r1, r3
 800137c:	4622      	mov	r2, r4
 800137e:	462b      	mov	r3, r5
}
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bcb0      	pop	{r4, r5, r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000208 	.word	0x20000208
 8001390:	20000290 	.word	0x20000290
 8001394:	00000000 	.word	0x00000000

08001398 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 800139c:	f7ff ffe0 	bl	8001360 <micros>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013a6:	609a      	str	r2, [r3, #8]
	QEIdata.Position[NEW] = QEIReadRaw;
 80013a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <QEIEncoderPosVel_Update+0xfc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013b0:	601a      	str	r2, [r3, #0]
	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 3072;
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <QEIEncoderPosVel_Update+0x100>)
 80013b8:	fb83 2301 	smull	r2, r3, r3, r1
 80013bc:	125a      	asrs	r2, r3, #9
 80013be:	17cb      	asrs	r3, r1, #31
 80013c0:	1ad2      	subs	r2, r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	029b      	lsls	r3, r3, #10
 80013ca:	1aca      	subs	r2, r1, r3
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013ce:	611a      	str	r2, [r3, #16]
	//calculate dx
	diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4a30      	ldr	r2, [pc, #192]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 80013dc:	6013      	str	r3, [r2, #0]
	//Handle Warp around
	if(diffPosition > 32256)
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 80013e6:	dd05      	ble.n	80013f4 <QEIEncoderPosVel_Update+0x5c>
		diffPosition -=64512;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 80013f0:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 80013f2:	6013      	str	r3, [r2, #0]
	if(diffPosition < -32256)
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 80013fc:	da05      	bge.n	800140a <QEIEncoderPosVel_Update+0x72>
	diffPosition +=64512;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8001406:	4a25      	ldr	r2, [pc, #148]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 8001408:	6013      	str	r3, [r2, #0]
	//calculate dt
	diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001; //0.000001
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f851 	bl	80004bc <__aeabi_i2d>
 800141a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001488 <QEIEncoderPosVel_Update+0xf0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8b6 	bl	8000590 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fac2 	bl	80009b4 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <QEIEncoderPosVel_Update+0x108>)
 8001434:	6013      	str	r3, [r2, #0]
	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <QEIEncoderPosVel_Update+0x104>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <QEIEncoderPosVel_Update+0x108>)
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 800144e:	edc3 7a05 	vstr	s15, [r3, #20]
//	QEIdata.QEIAngularVeloKalman = kalman_filter(QEIdata.QEIAngularVelocity);
	Velo_Kalman = SteadyStateKalmanFilter(Voltage ,QEIdata.QEIAngularVelocity);
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <QEIEncoderPosVel_Update+0x10c>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 800145a:	ed93 7a05 	vldr	s14, [r3, #20]
 800145e:	eef0 0a47 	vmov.f32	s1, s14
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f000 f821 	bl	80014ac <SteadyStateKalmanFilter>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <QEIEncoderPosVel_Update+0x110>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 800147a:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 800147c:	4b04      	ldr	r3, [pc, #16]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <QEIEncoderPosVel_Update+0xf8>)
 8001482:	60d3      	str	r3, [r2, #12]
//	    }
//
//	    // Store values for the next loop
//	    QEIdata.Position[OLD] = QEIdata.Position[NEW];
//	    QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	a0b5ed8d 	.word	0xa0b5ed8d
 800148c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001490:	20000270 	.word	0x20000270
 8001494:	20000260 	.word	0x20000260
 8001498:	2aaaaaab 	.word	0x2aaaaaab
 800149c:	20000258 	.word	0x20000258
 80014a0:	20000254 	.word	0x20000254
 80014a4:	20000268 	.word	0x20000268
 80014a8:	2000026c 	.word	0x2000026c

080014ac <SteadyStateKalmanFilter>:

volatile arm_status Calst;
float checkVal;
float SteadyStateKalmanFilter(float32_t Vin,float32_t Velocity){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	@ 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014b6:	edc7 0a00 	vstr	s1, [r7]
	  arm_mat_init_f32(&Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80014ba:	463b      	mov	r3, r7
 80014bc:	2201      	movs	r2, #1
 80014be:	2101      	movs	r1, #1
 80014c0:	4848      	ldr	r0, [pc, #288]	@ (80015e4 <SteadyStateKalmanFilter+0x138>)
 80014c2:	f004 fabc 	bl	8005a3e <arm_mat_init_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&B_matrix, Vin, &Bu_matrix); 		   				// Bu
 80014c6:	4948      	ldr	r1, [pc, #288]	@ (80015e8 <SteadyStateKalmanFilter+0x13c>)
 80014c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80014cc:	4847      	ldr	r0, [pc, #284]	@ (80015ec <SteadyStateKalmanFilter+0x140>)
 80014ce:	f004 febf 	bl	8006250 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&A_matrix, &X_k_matrix, &Ax_matrix);  		   		// Ax
 80014d2:	4a47      	ldr	r2, [pc, #284]	@ (80015f0 <SteadyStateKalmanFilter+0x144>)
 80014d4:	4947      	ldr	r1, [pc, #284]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 80014d6:	4848      	ldr	r0, [pc, #288]	@ (80015f8 <SteadyStateKalmanFilter+0x14c>)
 80014d8:	f004 fe40 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_add_f32(&Ax_matrix, &Bu_matrix, &X_k_matrix); 		   		// Xk = Ax + Bu
 80014dc:	4a45      	ldr	r2, [pc, #276]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 80014de:	4942      	ldr	r1, [pc, #264]	@ (80015e8 <SteadyStateKalmanFilter+0x13c>)
 80014e0:	4843      	ldr	r0, [pc, #268]	@ (80015f0 <SteadyStateKalmanFilter+0x144>)
 80014e2:	f004 fa71 	bl	80059c8 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&A_matrix, &P_k_matrix, &P_k_matrix);  		   		// Pk = A * P_pk
 80014e6:	4a45      	ldr	r2, [pc, #276]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80014e8:	4944      	ldr	r1, [pc, #272]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80014ea:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <SteadyStateKalmanFilter+0x14c>)
 80014ec:	f004 fe36 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&P_k_matrix, &A_transpose_matrix, &P_k_matrix); 		// Pk = A * P_pk * A^T
 80014f0:	4a42      	ldr	r2, [pc, #264]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80014f2:	4943      	ldr	r1, [pc, #268]	@ (8001600 <SteadyStateKalmanFilter+0x154>)
 80014f4:	4841      	ldr	r0, [pc, #260]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80014f6:	f004 fe31 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&G_matrix, &G_transpose_matrix, &GGT_matrix);        // G * G^T
 80014fa:	4a42      	ldr	r2, [pc, #264]	@ (8001604 <SteadyStateKalmanFilter+0x158>)
 80014fc:	4942      	ldr	r1, [pc, #264]	@ (8001608 <SteadyStateKalmanFilter+0x15c>)
 80014fe:	4843      	ldr	r0, [pc, #268]	@ (800160c <SteadyStateKalmanFilter+0x160>)
 8001500:	f004 fe2c 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_scale_f32(&GGT_matrix, Q, &GQGT_matrix); 				   	   	// G * Q
 8001504:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <SteadyStateKalmanFilter+0x164>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	4942      	ldr	r1, [pc, #264]	@ (8001614 <SteadyStateKalmanFilter+0x168>)
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	483c      	ldr	r0, [pc, #240]	@ (8001604 <SteadyStateKalmanFilter+0x158>)
 8001512:	f004 fe9d 	bl	8006250 <arm_mat_scale_f32>
	  arm_mat_add_f32(&P_k_matrix, &GQGT_matrix, &P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8001516:	4a39      	ldr	r2, [pc, #228]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 8001518:	493e      	ldr	r1, [pc, #248]	@ (8001614 <SteadyStateKalmanFilter+0x168>)
 800151a:	4838      	ldr	r0, [pc, #224]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 800151c:	f004 fa54 	bl	80059c8 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&C_matrix, &P_k_matrix, &CP_matrix);			     // C * Pk
 8001520:	4a3d      	ldr	r2, [pc, #244]	@ (8001618 <SteadyStateKalmanFilter+0x16c>)
 8001522:	4936      	ldr	r1, [pc, #216]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 8001524:	483d      	ldr	r0, [pc, #244]	@ (800161c <SteadyStateKalmanFilter+0x170>)
 8001526:	f004 fe19 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&CP_matrix, &C_transpose_matrix, &CPCT_matrix);   // C * Pk * C^T
 800152a:	4a3d      	ldr	r2, [pc, #244]	@ (8001620 <SteadyStateKalmanFilter+0x174>)
 800152c:	493d      	ldr	r1, [pc, #244]	@ (8001624 <SteadyStateKalmanFilter+0x178>)
 800152e:	483a      	ldr	r0, [pc, #232]	@ (8001618 <SteadyStateKalmanFilter+0x16c>)
 8001530:	f004 fe14 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_add_f32(&CPCT_matrix, &R_matrix, &CPCTR_matrix);			 // C * P_k * C^T + R
 8001534:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <SteadyStateKalmanFilter+0x17c>)
 8001536:	493d      	ldr	r1, [pc, #244]	@ (800162c <SteadyStateKalmanFilter+0x180>)
 8001538:	4839      	ldr	r0, [pc, #228]	@ (8001620 <SteadyStateKalmanFilter+0x174>)
 800153a:	f004 fa45 	bl	80059c8 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&CPCTR_matrix, &CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800153e:	493c      	ldr	r1, [pc, #240]	@ (8001630 <SteadyStateKalmanFilter+0x184>)
 8001540:	4839      	ldr	r0, [pc, #228]	@ (8001628 <SteadyStateKalmanFilter+0x17c>)
 8001542:	f004 fa94 	bl	8005a6e <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&P_k_matrix, &C_transpose_matrix, &PCT_matrix); 		 // P_k * C^T
 8001546:	4a3b      	ldr	r2, [pc, #236]	@ (8001634 <SteadyStateKalmanFilter+0x188>)
 8001548:	4936      	ldr	r1, [pc, #216]	@ (8001624 <SteadyStateKalmanFilter+0x178>)
 800154a:	482c      	ldr	r0, [pc, #176]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 800154c:	f004 fe06 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&PCT_matrix, &CPCTRinv_matrix, &K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8001550:	4a39      	ldr	r2, [pc, #228]	@ (8001638 <SteadyStateKalmanFilter+0x18c>)
 8001552:	4937      	ldr	r1, [pc, #220]	@ (8001630 <SteadyStateKalmanFilter+0x184>)
 8001554:	4837      	ldr	r0, [pc, #220]	@ (8001634 <SteadyStateKalmanFilter+0x188>)
 8001556:	f004 fe01 	bl	800615c <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Cx_matrix);				 // C * X_k
 800155a:	4a38      	ldr	r2, [pc, #224]	@ (800163c <SteadyStateKalmanFilter+0x190>)
 800155c:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 800155e:	482f      	ldr	r0, [pc, #188]	@ (800161c <SteadyStateKalmanFilter+0x170>)
 8001560:	f004 fdfc 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&Velocity_matrix,  &Cx_matrix, &yCx_matrix);			  // y - ( C * X_k )
 8001564:	4a36      	ldr	r2, [pc, #216]	@ (8001640 <SteadyStateKalmanFilter+0x194>)
 8001566:	4935      	ldr	r1, [pc, #212]	@ (800163c <SteadyStateKalmanFilter+0x190>)
 8001568:	481e      	ldr	r0, [pc, #120]	@ (80015e4 <SteadyStateKalmanFilter+0x138>)
 800156a:	f004 fea7 	bl	80062bc <arm_mat_sub_f32>
	  arm_mat_mult_f32(&K_matrix, &yCx_matrix, &KyCx_matrix);		     // K( y - ( C * X_k ) )
 800156e:	4a35      	ldr	r2, [pc, #212]	@ (8001644 <SteadyStateKalmanFilter+0x198>)
 8001570:	4933      	ldr	r1, [pc, #204]	@ (8001640 <SteadyStateKalmanFilter+0x194>)
 8001572:	4831      	ldr	r0, [pc, #196]	@ (8001638 <SteadyStateKalmanFilter+0x18c>)
 8001574:	f004 fdf2 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_add_f32(&X_k_matrix, &KyCx_matrix, &X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8001578:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 800157a:	4932      	ldr	r1, [pc, #200]	@ (8001644 <SteadyStateKalmanFilter+0x198>)
 800157c:	481d      	ldr	r0, [pc, #116]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 800157e:	f004 fa23 	bl	80059c8 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Output_matrix);
 8001582:	4a31      	ldr	r2, [pc, #196]	@ (8001648 <SteadyStateKalmanFilter+0x19c>)
 8001584:	491b      	ldr	r1, [pc, #108]	@ (80015f4 <SteadyStateKalmanFilter+0x148>)
 8001586:	4825      	ldr	r0, [pc, #148]	@ (800161c <SteadyStateKalmanFilter+0x170>)
 8001588:	f004 fde8 	bl	800615c <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[9];
	  arm_mat_init_f32(&temp_matrix4, 3, 3,(float32_t*) &temp_data4);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001594:	2203      	movs	r2, #3
 8001596:	2103      	movs	r1, #3
 8001598:	f004 fa51 	bl	8005a3e <arm_mat_init_f32>

	  arm_mat_mult_f32(&K_matrix, &C_matrix, &temp_matrix4);				// K * C
 800159c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015a0:	461a      	mov	r2, r3
 80015a2:	491e      	ldr	r1, [pc, #120]	@ (800161c <SteadyStateKalmanFilter+0x170>)
 80015a4:	4824      	ldr	r0, [pc, #144]	@ (8001638 <SteadyStateKalmanFilter+0x18c>)
 80015a6:	f004 fdd9 	bl	800615c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&I_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 80015aa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80015ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015b2:	4619      	mov	r1, r3
 80015b4:	4825      	ldr	r0, [pc, #148]	@ (800164c <SteadyStateKalmanFilter+0x1a0>)
 80015b6:	f004 fe81 	bl	80062bc <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &P_k_matrix, &P_k_matrix);			// (I - (K * C)) * P_k
 80015ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80015c0:	490e      	ldr	r1, [pc, #56]	@ (80015fc <SteadyStateKalmanFilter+0x150>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fdca 	bl	800615c <arm_mat_mult_f32>
	  Kalman_Speed = X_k[1];
 80015c8:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <SteadyStateKalmanFilter+0x1a4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <SteadyStateKalmanFilter+0x1a8>)
 80015ce:	6013      	str	r3, [r2, #0]
	  return  Kalman_Speed;
 80015d0:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <SteadyStateKalmanFilter+0x1a8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	ee07 3a90 	vmov	s15, r3
}
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	3738      	adds	r7, #56	@ 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000438 	.word	0x20000438
 80015e8:	2000037c 	.word	0x2000037c
 80015ec:	200002f0 	.word	0x200002f0
 80015f0:	20000390 	.word	0x20000390
 80015f4:	200002a4 	.word	0x200002a4
 80015f8:	200002d8 	.word	0x200002d8
 80015fc:	200002d0 	.word	0x200002d0
 8001600:	200002e0 	.word	0x200002e0
 8001604:	20000324 	.word	0x20000324
 8001608:	20000310 	.word	0x20000310
 800160c:	20000308 	.word	0x20000308
 8001610:	200000a8 	.word	0x200000a8
 8001614:	20000350 	.word	0x20000350
 8001618:	200003a4 	.word	0x200003a4
 800161c:	200002f8 	.word	0x200002f8
 8001620:	200003b8 	.word	0x200003b8
 8001624:	20000300 	.word	0x20000300
 8001628:	200003c4 	.word	0x200003c4
 800162c:	20000430 	.word	0x20000430
 8001630:	200003f8 	.word	0x200003f8
 8001634:	200003e4 	.word	0x200003e4
 8001638:	200003d0 	.word	0x200003d0
 800163c:	20000404 	.word	0x20000404
 8001640:	20000410 	.word	0x20000410
 8001644:	2000041c 	.word	0x2000041c
 8001648:	2000031c 	.word	0x2000031c
 800164c:	200002e8 	.word	0x200002e8
 8001650:	20000298 	.word	0x20000298
 8001654:	20000440 	.word	0x20000440

08001658 <Kalman_Start>:
void Kalman_Start(){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	arm_mat_init_f32(&X_k_matrix, 3, 1,(float32_t*) &X_k);
 800165c:	4b4b      	ldr	r3, [pc, #300]	@ (800178c <Kalman_Start+0x134>)
 800165e:	2201      	movs	r2, #1
 8001660:	2103      	movs	r1, #3
 8001662:	484b      	ldr	r0, [pc, #300]	@ (8001790 <Kalman_Start+0x138>)
 8001664:	f004 f9eb 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&P_k_matrix, 3, 3,(float32_t*) &P_k);
 8001668:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <Kalman_Start+0x13c>)
 800166a:	2203      	movs	r2, #3
 800166c:	2103      	movs	r1, #3
 800166e:	484a      	ldr	r0, [pc, #296]	@ (8001798 <Kalman_Start+0x140>)
 8001670:	f004 f9e5 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&A_matrix, 3, 3,(float32_t*) &A);
 8001674:	4b49      	ldr	r3, [pc, #292]	@ (800179c <Kalman_Start+0x144>)
 8001676:	2203      	movs	r2, #3
 8001678:	2103      	movs	r1, #3
 800167a:	4849      	ldr	r0, [pc, #292]	@ (80017a0 <Kalman_Start+0x148>)
 800167c:	f004 f9df 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, 3, 1,(float32_t*) &B);
 8001680:	4b48      	ldr	r3, [pc, #288]	@ (80017a4 <Kalman_Start+0x14c>)
 8001682:	2201      	movs	r2, #1
 8001684:	2103      	movs	r1, #3
 8001686:	4848      	ldr	r0, [pc, #288]	@ (80017a8 <Kalman_Start+0x150>)
 8001688:	f004 f9d9 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&C_matrix, 1, 3,(float32_t*) &C);
 800168c:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <Kalman_Start+0x154>)
 800168e:	2203      	movs	r2, #3
 8001690:	2101      	movs	r1, #1
 8001692:	4847      	ldr	r0, [pc, #284]	@ (80017b0 <Kalman_Start+0x158>)
 8001694:	f004 f9d3 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&G_matrix, 3, 1,(float32_t*) &G);
 8001698:	4b46      	ldr	r3, [pc, #280]	@ (80017b4 <Kalman_Start+0x15c>)
 800169a:	2201      	movs	r2, #1
 800169c:	2103      	movs	r1, #3
 800169e:	4846      	ldr	r0, [pc, #280]	@ (80017b8 <Kalman_Start+0x160>)
 80016a0:	f004 f9cd 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&A_transpose_matrix, 3, 3,(float32_t*) &A_transpose);
 80016a4:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <Kalman_Start+0x164>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	2103      	movs	r1, #3
 80016aa:	4845      	ldr	r0, [pc, #276]	@ (80017c0 <Kalman_Start+0x168>)
 80016ac:	f004 f9c7 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose_matrix, 3, 1,(float32_t*) &C_transpose);
 80016b0:	4b44      	ldr	r3, [pc, #272]	@ (80017c4 <Kalman_Start+0x16c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	2103      	movs	r1, #3
 80016b6:	4844      	ldr	r0, [pc, #272]	@ (80017c8 <Kalman_Start+0x170>)
 80016b8:	f004 f9c1 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&G_transpose_matrix, 1, 3,(float32_t*) &G_transpose);
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <Kalman_Start+0x174>)
 80016be:	2203      	movs	r2, #3
 80016c0:	2101      	movs	r1, #1
 80016c2:	4843      	ldr	r0, [pc, #268]	@ (80017d0 <Kalman_Start+0x178>)
 80016c4:	f004 f9bb 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&GGT_matrix, 3, 3,(float32_t*) &GGT);
 80016c8:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <Kalman_Start+0x17c>)
 80016ca:	2203      	movs	r2, #3
 80016cc:	2103      	movs	r1, #3
 80016ce:	4842      	ldr	r0, [pc, #264]	@ (80017d8 <Kalman_Start+0x180>)
 80016d0:	f004 f9b5 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&GQGT_matrix, 3, 3,(float32_t*) &GQGT);
 80016d4:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <Kalman_Start+0x184>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	2103      	movs	r1, #3
 80016da:	4841      	ldr	r0, [pc, #260]	@ (80017e0 <Kalman_Start+0x188>)
 80016dc:	f004 f9af 	bl	8005a3e <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&Bu_matrix, 3, 1,(float32_t*) &Bu_data);
 80016e0:	4b40      	ldr	r3, [pc, #256]	@ (80017e4 <Kalman_Start+0x18c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	2103      	movs	r1, #3
 80016e6:	4840      	ldr	r0, [pc, #256]	@ (80017e8 <Kalman_Start+0x190>)
 80016e8:	f004 f9a9 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&Ax_matrix, 3, 1,(float32_t*) &Ax_data);
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <Kalman_Start+0x194>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	2103      	movs	r1, #3
 80016f2:	483f      	ldr	r0, [pc, #252]	@ (80017f0 <Kalman_Start+0x198>)
 80016f4:	f004 f9a3 	bl	8005a3e <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&CP_matrix, 1, 3,(float32_t*) &CP);
 80016f8:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <Kalman_Start+0x19c>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	2101      	movs	r1, #1
 80016fe:	483e      	ldr	r0, [pc, #248]	@ (80017f8 <Kalman_Start+0x1a0>)
 8001700:	f004 f99d 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&CPCT_matrix, 1, 1,(float32_t*) &CPCT);
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <Kalman_Start+0x1a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	2101      	movs	r1, #1
 800170a:	483d      	ldr	r0, [pc, #244]	@ (8001800 <Kalman_Start+0x1a8>)
 800170c:	f004 f997 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&CPCTR_matrix, 1, 1,(float32_t*) &CPCTR);
 8001710:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <Kalman_Start+0x1ac>)
 8001712:	2201      	movs	r2, #1
 8001714:	2101      	movs	r1, #1
 8001716:	483c      	ldr	r0, [pc, #240]	@ (8001808 <Kalman_Start+0x1b0>)
 8001718:	f004 f991 	bl	8005a3e <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&K_matrix, 3, 1,(float32_t*) &K);
 800171c:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <Kalman_Start+0x1b4>)
 800171e:	2201      	movs	r2, #1
 8001720:	2103      	movs	r1, #3
 8001722:	483b      	ldr	r0, [pc, #236]	@ (8001810 <Kalman_Start+0x1b8>)
 8001724:	f004 f98b 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&PCT_matrix, 3, 1,(float32_t*) &PCT);
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <Kalman_Start+0x1bc>)
 800172a:	2201      	movs	r2, #1
 800172c:	2103      	movs	r1, #3
 800172e:	483a      	ldr	r0, [pc, #232]	@ (8001818 <Kalman_Start+0x1c0>)
 8001730:	f004 f985 	bl	8005a3e <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&CPCTRinv_matrix, 1, 1,(float32_t*) &CPCTRinv);
 8001734:	4b39      	ldr	r3, [pc, #228]	@ (800181c <Kalman_Start+0x1c4>)
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	4839      	ldr	r0, [pc, #228]	@ (8001820 <Kalman_Start+0x1c8>)
 800173c:	f004 f97f 	bl	8005a3e <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&Cx_matrix, 1, 1,(float32_t*) &Cx);
 8001740:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <Kalman_Start+0x1cc>)
 8001742:	2201      	movs	r2, #1
 8001744:	2101      	movs	r1, #1
 8001746:	4838      	ldr	r0, [pc, #224]	@ (8001828 <Kalman_Start+0x1d0>)
 8001748:	f004 f979 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&yCx_matrix, 1, 1,(float32_t*) &yCx);
 800174c:	4b37      	ldr	r3, [pc, #220]	@ (800182c <Kalman_Start+0x1d4>)
 800174e:	2201      	movs	r2, #1
 8001750:	2101      	movs	r1, #1
 8001752:	4837      	ldr	r0, [pc, #220]	@ (8001830 <Kalman_Start+0x1d8>)
 8001754:	f004 f973 	bl	8005a3e <arm_mat_init_f32>
	arm_mat_init_f32(&KyCx_matrix, 3, 1,(float32_t*) &KyCx);
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <Kalman_Start+0x1dc>)
 800175a:	2201      	movs	r2, #1
 800175c:	2103      	movs	r1, #3
 800175e:	4836      	ldr	r0, [pc, #216]	@ (8001838 <Kalman_Start+0x1e0>)
 8001760:	f004 f96d 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&Output_matrix, 1, 1,(float32_t*) &Es_velocity);
 8001764:	4b35      	ldr	r3, [pc, #212]	@ (800183c <Kalman_Start+0x1e4>)
 8001766:	2201      	movs	r2, #1
 8001768:	2101      	movs	r1, #1
 800176a:	4835      	ldr	r0, [pc, #212]	@ (8001840 <Kalman_Start+0x1e8>)
 800176c:	f004 f967 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&I_matrix, 3, 3,(float32_t*) &I);
 8001770:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <Kalman_Start+0x1ec>)
 8001772:	2203      	movs	r2, #3
 8001774:	2103      	movs	r1, #3
 8001776:	4834      	ldr	r0, [pc, #208]	@ (8001848 <Kalman_Start+0x1f0>)
 8001778:	f004 f961 	bl	8005a3e <arm_mat_init_f32>

	arm_mat_init_f32(&R_matrix, 1, 1,(float32_t*) &R);
 800177c:	4b33      	ldr	r3, [pc, #204]	@ (800184c <Kalman_Start+0x1f4>)
 800177e:	2201      	movs	r2, #1
 8001780:	2101      	movs	r1, #1
 8001782:	4833      	ldr	r0, [pc, #204]	@ (8001850 <Kalman_Start+0x1f8>)
 8001784:	f004 f95b 	bl	8005a3e <arm_mat_init_f32>
//	arm_mat_init_f32(&Z_matrix, 1, 1,(float32_t*) &Z);
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000298 	.word	0x20000298
 8001790:	200002a4 	.word	0x200002a4
 8001794:	200002ac 	.word	0x200002ac
 8001798:	200002d0 	.word	0x200002d0
 800179c:	20000000 	.word	0x20000000
 80017a0:	200002d8 	.word	0x200002d8
 80017a4:	2000006c 	.word	0x2000006c
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	20000078 	.word	0x20000078
 80017b0:	200002f8 	.word	0x200002f8
 80017b4:	20000090 	.word	0x20000090
 80017b8:	20000308 	.word	0x20000308
 80017bc:	20000024 	.word	0x20000024
 80017c0:	200002e0 	.word	0x200002e0
 80017c4:	20000084 	.word	0x20000084
 80017c8:	20000300 	.word	0x20000300
 80017cc:	2000009c 	.word	0x2000009c
 80017d0:	20000310 	.word	0x20000310
 80017d4:	2000032c 	.word	0x2000032c
 80017d8:	20000324 	.word	0x20000324
 80017dc:	20000358 	.word	0x20000358
 80017e0:	20000350 	.word	0x20000350
 80017e4:	20000384 	.word	0x20000384
 80017e8:	2000037c 	.word	0x2000037c
 80017ec:	20000398 	.word	0x20000398
 80017f0:	20000390 	.word	0x20000390
 80017f4:	200003ac 	.word	0x200003ac
 80017f8:	200003a4 	.word	0x200003a4
 80017fc:	200003c0 	.word	0x200003c0
 8001800:	200003b8 	.word	0x200003b8
 8001804:	200003cc 	.word	0x200003cc
 8001808:	200003c4 	.word	0x200003c4
 800180c:	200003d8 	.word	0x200003d8
 8001810:	200003d0 	.word	0x200003d0
 8001814:	200003ec 	.word	0x200003ec
 8001818:	200003e4 	.word	0x200003e4
 800181c:	20000400 	.word	0x20000400
 8001820:	200003f8 	.word	0x200003f8
 8001824:	2000040c 	.word	0x2000040c
 8001828:	20000404 	.word	0x20000404
 800182c:	20000418 	.word	0x20000418
 8001830:	20000410 	.word	0x20000410
 8001834:	20000424 	.word	0x20000424
 8001838:	2000041c 	.word	0x2000041c
 800183c:	20000318 	.word	0x20000318
 8001840:	2000031c 	.word	0x2000031c
 8001844:	20000048 	.word	0x20000048
 8001848:	200002e8 	.word	0x200002e8
 800184c:	200000ac 	.word	0x200000ac
 8001850:	20000430 	.word	0x20000430

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <Error_Handler+0x8>

08001860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_MspInit+0x44>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6613      	str	r3, [r2, #96]	@ 0x60
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x44>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x44>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001896:	f000 fd73 	bl	8002380 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09e      	sub	sp, #120	@ 0x78
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2254      	movs	r2, #84	@ 0x54
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fd32 	bl	8006332 <memset>
  if(huart->Instance==LPUART1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <HAL_UART_MspInit+0xa8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d136      	bne.n	8001946 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018d8:	2320      	movs	r3, #32
 80018da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 fa89 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff ffb0 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_UART_MspInit+0xac>)
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	4a16      	ldr	r2, [pc, #88]	@ (8001954 <HAL_UART_MspInit+0xac>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <HAL_UART_MspInit+0xac>)
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_UART_MspInit+0xac>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001910:	4a10      	ldr	r2, [pc, #64]	@ (8001954 <HAL_UART_MspInit+0xac>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_UART_MspInit+0xac>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001924:	230c      	movs	r3, #12
 8001926:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001934:	230c      	movs	r3, #12
 8001936:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001942:	f000 fabb 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3778      	adds	r7, #120	@ 0x78
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40008000 	.word	0x40008000
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a16      	ldr	r2, [pc, #88]	@ (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10c      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196a:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001970:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001982:	e018      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0f      	ldr	r2, [pc, #60]	@ (80019c8 <HAL_TIM_Base_MspInit+0x70>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d113      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6593      	str	r3, [r2, #88]	@ 0x58
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f000 fa51 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019b0:	2032      	movs	r0, #50	@ 0x32
 80019b2:	f000 fa68 	bl	8001e86 <HAL_NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40000c00 	.word	0x40000c00

080019cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a17      	ldr	r2, [pc, #92]	@ (8001a48 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d128      	bne.n	8001a40 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	4a16      	ldr	r2, [pc, #88]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x80>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f000 fa3e 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_TIM_MspPostInit+0x64>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11b      	bne.n	8001aaa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001aa6:	f000 fa09 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40012c00 	.word	0x40012c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000800 	.word	0x48000800

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f8a3 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b22:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b26:	f000 fb63 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <TIM5_IRQHandler+0x10>)
 8001b36:	f001 ff27 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000208 	.word	0x20000208

08001b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b68:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f004 fbd5 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7ff f8d3 	bl	8000d44 <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   r0, =_estack
 8001ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001bac:	080063f4 	.word	0x080063f4
  ldr r2, =_sbss
 8001bb0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001bb4:	20000454 	.word	0x20000454

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>

08001bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 f939 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f80e 	bl	8001bec <HAL_InitTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e001      	b.n	8001be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bdc:	f7ff fe40 	bl	8001860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be0:	79fb      	ldrb	r3, [r7, #7]

}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_InitTick+0x68>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d022      	beq.n	8001c46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c00:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_InitTick+0x6c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_InitTick+0x68>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f944 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	d809      	bhi.n	8001c3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c26:	2200      	movs	r2, #0
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2e:	f000 f910 	bl	8001e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_InitTick+0x70>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e004      	b.n	8001c4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e001      	b.n	8001c4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000b8 	.word	0x200000b8
 8001c58:	200000b0 	.word	0x200000b0
 8001c5c:	200000b4 	.word	0x200000b4

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a03      	ldr	r2, [pc, #12]	@ (8001c7c <HAL_IncTick+0x1c>)
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20000450 	.word	0x20000450
 8001c80:	200000b8 	.word	0x200000b8

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000450 	.word	0x20000450

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff40 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff33 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa4 	bl	8001df8 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eca:	e15a      	b.n	8002182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 814c 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6613      	str	r3, [r2, #96]	@ 0x60
 800203c:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002048:	4a56      	ldr	r2, [pc, #344]	@ (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_Init+0x1f8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4c      	ldr	r2, [pc, #304]	@ (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_Init+0x1f4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4b      	ldr	r2, [pc, #300]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_Init+0x1f0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a4a      	ldr	r2, [pc, #296]	@ (80021b0 <HAL_GPIO_Init+0x2f4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a49      	ldr	r2, [pc, #292]	@ (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a48      	ldr	r2, [pc, #288]	@ (80021b8 <HAL_GPIO_Init+0x2fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1e4>
 800209c:	2305      	movs	r3, #5
 800209e:	e00a      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a0:	2306      	movs	r3, #6
 80020a2:	e008      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a4:	2304      	movs	r3, #4
 80020a6:	e006      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e004      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_GPIO_Init+0x1fa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	f002 0203 	and.w	r2, r2, #3
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	4093      	lsls	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c6:	4937      	ldr	r1, [pc, #220]	@ (80021a4 <HAL_GPIO_Init+0x2e8>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_GPIO_Init+0x300>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f8:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <HAL_GPIO_Init+0x300>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020fe:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002122:	4a26      	ldr	r2, [pc, #152]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_GPIO_Init+0x300>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214c:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <HAL_GPIO_Init+0x300>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002176:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f ae9d 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000
 80021a8:	48000400 	.word	0x48000400
 80021ac:	48000800 	.word	0x48000800
 80021b0:	48000c00 	.word	0x48000c00
 80021b4:	48001000 	.word	0x48001000
 80021b8:	48001400 	.word	0x48001400
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f806 	bl	8002220 <HAL_GPIO_EXTI_Callback>
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d141      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002246:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d131      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800225a:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002264:	4b43      	ldr	r3, [pc, #268]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226c:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2232      	movs	r2, #50	@ 0x32
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	0c9b      	lsrs	r3, r3, #18
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	e002      	b.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229e:	d102      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f2      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022a6:	4b33      	ldr	r3, [pc, #204]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b2:	d158      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e057      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022be:	4a2d      	ldr	r2, [pc, #180]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022c8:	e04d      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d0:	d141      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d131      	bne.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e0:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e6:	4a23      	ldr	r2, [pc, #140]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2232      	movs	r2, #50	@ 0x32
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002316:	e002      	b.n	800231e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3b01      	subs	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233e:	d112      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e011      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002354:	e007      	b.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002364:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40007000 	.word	0x40007000
 8002378:	200000b0 	.word	0x200000b0
 800237c:	431bde83 	.word	0x431bde83

08002380 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800238a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800238e:	6093      	str	r3, [r2, #8]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e2fe      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d075      	beq.n	80024aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b97      	ldr	r3, [pc, #604]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c8:	4b94      	ldr	r3, [pc, #592]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x3e>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_OscConfig+0x44>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b8d      	ldr	r3, [pc, #564]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e2d9      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x74>
 8002406:	4b85      	ldr	r3, [pc, #532]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a84      	ldr	r2, [pc, #528]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b7f      	ldr	r3, [pc, #508]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7e      	ldr	r2, [pc, #504]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b7c      	ldr	r3, [pc, #496]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7b      	ldr	r2, [pc, #492]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002438:	4b78      	ldr	r3, [pc, #480]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a77      	ldr	r2, [pc, #476]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b75      	ldr	r3, [pc, #468]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a74      	ldr	r2, [pc, #464]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff fc14 	bl	8001c84 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fc10 	bl	8001c84 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e29e      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xc0>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff fc00 	bl	8001c84 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fbfc 	bl	8001c84 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e28a      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	4b60      	ldr	r3, [pc, #384]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d075      	beq.n	80025a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	4b59      	ldr	r3, [pc, #356]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c0:	4b56      	ldr	r3, [pc, #344]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x136>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d002      	beq.n	80024dc <HAL_RCC_OscConfig+0x13c>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11f      	bne.n	800251c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	4b4f      	ldr	r3, [pc, #316]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x154>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e25d      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b49      	ldr	r3, [pc, #292]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4946      	ldr	r1, [pc, #280]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002508:	4b45      	ldr	r3, [pc, #276]	@ (8002620 <HAL_RCC_OscConfig+0x280>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fb6d 	bl	8001bec <HAL_InitTick>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d043      	beq.n	80025a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e249      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3c      	ldr	r2, [pc, #240]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fba8 	bl	8001c84 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff fba4 	bl	8001c84 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e232      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254a:	4b34      	ldr	r3, [pc, #208]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	492d      	ldr	r1, [pc, #180]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
 800256a:	e01a      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2a      	ldr	r2, [pc, #168]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff fb84 	bl	8001c84 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7ff fb80 	bl	8001c84 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e20e      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002592:	4b22      	ldr	r3, [pc, #136]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1e0>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d041      	beq.n	8002632 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025bc:	4a17      	ldr	r2, [pc, #92]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb5d 	bl	8001c84 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff fb59 	bl	8001c84 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1e7      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ef      	beq.n	80025ce <HAL_RCC_OscConfig+0x22e>
 80025ee:	e020      	b.n	8002632 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	4a09      	ldr	r2, [pc, #36]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fb40 	bl	8001c84 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002606:	e00d      	b.n	8002624 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fb3c 	bl	8001c84 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d906      	bls.n	8002624 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1ca      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	200000b4 	.word	0x200000b4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	4b8c      	ldr	r3, [pc, #560]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ea      	bne.n	8002608 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a6 	beq.w	800278c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002644:	4b84      	ldr	r3, [pc, #528]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x2b4>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x2b6>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b7f      	ldr	r3, [pc, #508]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	4a7e      	ldr	r2, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	@ 0x58
 8002666:	4b7c      	ldr	r3, [pc, #496]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002676:	4b79      	ldr	r3, [pc, #484]	@ (800285c <HAL_RCC_OscConfig+0x4bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002682:	4b76      	ldr	r3, [pc, #472]	@ (800285c <HAL_RCC_OscConfig+0x4bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	@ (800285c <HAL_RCC_OscConfig+0x4bc>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff faf9 	bl	8001c84 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff faf5 	bl	8001c84 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e183      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCC_OscConfig+0x4bc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d108      	bne.n	80026ce <HAL_RCC_OscConfig+0x32e>
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026cc:	e024      	b.n	8002718 <HAL_RCC_OscConfig+0x378>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d110      	bne.n	80026f8 <HAL_RCC_OscConfig+0x358>
 80026d6:	4b60      	ldr	r3, [pc, #384]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f6:	e00f      	b.n	8002718 <HAL_RCC_OscConfig+0x378>
 80026f8:	4b57      	ldr	r3, [pc, #348]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a56      	ldr	r2, [pc, #344]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002708:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7ff fab0 	bl	8001c84 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7ff faac 	bl	8001c84 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e138      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ed      	beq.n	8002728 <HAL_RCC_OscConfig+0x388>
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7ff fa99 	bl	8001c84 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff fa95 	bl	8001c84 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e121      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ed      	bne.n	8002756 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03c      	beq.n	8002812 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01c      	beq.n	80027da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7ff fa68 	bl	8001c84 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b8:	f7ff fa64 	bl	8001c84 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0f2      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ca:	4b23      	ldr	r3, [pc, #140]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80027cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCC_OscConfig+0x418>
 80027d8:	e01b      	b.n	8002812 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80027dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7ff fa4b 	bl	8001c84 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f2:	f7ff fa47 	bl	8001c84 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0d5      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80c9 	beq.w	80029ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281c:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b0c      	cmp	r3, #12
 8002826:	f000 8083 	beq.w	8002930 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d15e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <HAL_RCC_OscConfig+0x4b8>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff fa21 	bl	8001c84 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e00c      	b.n	8002860 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff fa1d 	bl	8001c84 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d905      	bls.n	8002860 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0ab      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002860:	4b55      	ldr	r3, [pc, #340]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ec      	bne.n	8002846 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286c:	4b52      	ldr	r3, [pc, #328]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_RCC_OscConfig+0x61c>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a11      	ldr	r1, [r2, #32]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800287c:	3a01      	subs	r2, #1
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002886:	0212      	lsls	r2, r2, #8
 8002888:	4311      	orrs	r1, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800288e:	0852      	lsrs	r2, r2, #1
 8002890:	3a01      	subs	r2, #1
 8002892:	0552      	lsls	r2, r2, #21
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0652      	lsls	r2, r2, #25
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028a6:	06d2      	lsls	r2, r2, #27
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4943      	ldr	r1, [pc, #268]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b41      	ldr	r3, [pc, #260]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a40      	ldr	r2, [pc, #256]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028bc:	4b3e      	ldr	r3, [pc, #248]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a3d      	ldr	r2, [pc, #244]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f9dc 	bl	8001c84 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7ff f9d8 	bl	8001c84 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e066      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	4b35      	ldr	r3, [pc, #212]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x530>
 80028ee:	e05e      	b.n	80029ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b31      	ldr	r3, [pc, #196]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a30      	ldr	r2, [pc, #192]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 80028f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7ff f9c2 	bl	8001c84 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7ff f9be 	bl	8001c84 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e04c      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002916:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002922:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	4924      	ldr	r1, [pc, #144]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 8002928:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <HAL_RCC_OscConfig+0x620>)
 800292a:	4013      	ands	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
 800292e:	e03e      	b.n	80029ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e039      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800293c:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <HAL_RCC_OscConfig+0x618>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0203 	and.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	429a      	cmp	r2, r3
 800294e:	d12c      	bne.n	80029aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d123      	bne.n	80029aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11b      	bne.n	80029aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d113      	bne.n	80029aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d109      	bne.n	80029aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	019f800c 	.word	0x019f800c
 80029c0:	feeefffc 	.word	0xfeeefffc

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e11e      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b91      	ldr	r3, [pc, #580]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	498c      	ldr	r1, [pc, #560]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e106      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d073      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d129      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a20:	4b81      	ldr	r3, [pc, #516]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0f4      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a30:	f000 f99e 	bl	8002d70 <RCC_GetSysClockFreqFromPLLSource>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4a7c      	ldr	r2, [pc, #496]	@ (8002c2c <HAL_RCC_ClockConfig+0x268>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d93f      	bls.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d033      	beq.n	8002abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12f      	bne.n	8002abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a5e:	4b72      	ldr	r3, [pc, #456]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a66:	4a70      	ldr	r2, [pc, #448]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e024      	b.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0c6      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8c:	4b66      	ldr	r3, [pc, #408]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0be      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a9c:	f000 f8ce 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4a61      	ldr	r2, [pc, #388]	@ (8002c2c <HAL_RCC_ClockConfig+0x268>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d909      	bls.n	8002abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b5a      	ldr	r3, [pc, #360]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4957      	ldr	r1, [pc, #348]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad0:	f7ff f8d8 	bl	8001c84 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7ff f8d4 	bl	8001c84 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e095      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b4e      	ldr	r3, [pc, #312]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b43      	ldr	r3, [pc, #268]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a42      	ldr	r2, [pc, #264]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b30:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b38:	4a3b      	ldr	r2, [pc, #236]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4936      	ldr	r1, [pc, #216]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b5a:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a32      	ldr	r2, [pc, #200]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d21d      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 020f 	bic.w	r2, r3, #15
 8002b7c:	4929      	ldr	r1, [pc, #164]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b84:	f7ff f87e 	bl	8001c84 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7ff f87a 	bl	8001c84 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e03b      	b.n	8002c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1ed      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4917      	ldr	r1, [pc, #92]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490f      	ldr	r1, [pc, #60]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bee:	f000 f825 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490c      	ldr	r1, [pc, #48]	@ (8002c30 <HAL_RCC_ClockConfig+0x26c>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <HAL_RCC_ClockConfig+0x270>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_RCC_ClockConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ffea 	bl	8001bec <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	04c4b400 	.word	0x04c4b400
 8002c30:	080063a4 	.word	0x080063a4
 8002c34:	200000b0 	.word	0x200000b0
 8002c38:	200000b4 	.word	0x200000b4

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e047      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c54:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c60:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e03e      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c66:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d136      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c90:	4a1a      	ldr	r2, [pc, #104]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c9a:	68d2      	ldr	r2, [r2, #12]
 8002c9c:	0a12      	lsrs	r2, r2, #8
 8002c9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002caa:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4a10      	ldr	r2, [pc, #64]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	0a12      	lsrs	r2, r2, #8
 8002cb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
      break;
 8002cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0e5b      	lsrs	r3, r3, #25
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e001      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ce4:	693b      	ldr	r3, [r7, #16]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	016e3600 	.word	0x016e3600

08002d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	@ (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	200000b0 	.word	0x200000b0

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4904      	ldr	r1, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	080063b4 	.word	0x080063b4

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d48:	f7ff ffda 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0adb      	lsrs	r3, r3, #11
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4904      	ldr	r1, [pc, #16]	@ (8002d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	080063b4 	.word	0x080063b4

08002d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d10c      	bne.n	8002dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d94:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d9e:	68d2      	ldr	r2, [r2, #12]
 8002da0:	0a12      	lsrs	r2, r2, #8
 8002da2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
    break;
 8002dac:	e00c      	b.n	8002dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	0a12      	lsrs	r2, r2, #8
 8002dbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    break;
 8002dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0e5b      	lsrs	r3, r3, #25
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	016e3600 	.word	0x016e3600
 8002df8:	00f42400 	.word	0x00f42400

08002dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e04:	2300      	movs	r3, #0
 8002e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8098 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a39      	ldr	r2, [pc, #228]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e52:	f7fe ff17 	bl	8001c84 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e58:	e009      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe ff13 	bl	8001c84 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d902      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002e6c:	e005      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6e:	4b30      	ldr	r3, [pc, #192]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ef      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d159      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e80:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01e      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d019      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e9c:	4b23      	ldr	r3, [pc, #140]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea8:	4b20      	ldr	r3, [pc, #128]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	4a1f      	ldr	r2, [pc, #124]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec8:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe fed3 	bl	8001c84 <HAL_GetTick>
 8002ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee0:	e00b      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fecf 	bl	8001c84 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d902      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ec      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1c:	4903      	ldr	r1, [pc, #12]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	74bb      	strb	r3, [r7, #18]
 8002f2a:	e005      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4ba7      	ldr	r3, [pc, #668]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f42:	4aa6      	ldr	r2, [pc, #664]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f56:	4ba1      	ldr	r3, [pc, #644]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	499d      	ldr	r1, [pc, #628]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f78:	4b98      	ldr	r3, [pc, #608]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f023 020c 	bic.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4995      	ldr	r1, [pc, #596]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9a:	4b90      	ldr	r3, [pc, #576]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	498c      	ldr	r1, [pc, #560]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fbc:	4b87      	ldr	r3, [pc, #540]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4984      	ldr	r1, [pc, #528]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fde:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	497b      	ldr	r1, [pc, #492]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003000:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4973      	ldr	r1, [pc, #460]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003022:	4b6e      	ldr	r3, [pc, #440]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	496a      	ldr	r1, [pc, #424]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003044:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4962      	ldr	r1, [pc, #392]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003066:	4b5d      	ldr	r3, [pc, #372]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	4959      	ldr	r1, [pc, #356]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003088:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	4951      	ldr	r1, [pc, #324]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030aa:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	4948      	ldr	r1, [pc, #288]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030cc:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4940      	ldr	r1, [pc, #256]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a3a      	ldr	r2, [pc, #232]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003104:	4b35      	ldr	r3, [pc, #212]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003112:	4932      	ldr	r1, [pc, #200]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a2c      	ldr	r2, [pc, #176]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	4924      	ldr	r1, [pc, #144]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a1e      	ldr	r2, [pc, #120]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	4916      	ldr	r1, [pc, #88]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a10      	ldr	r2, [pc, #64]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d019      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	4908      	ldr	r1, [pc, #32]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ca:	d109      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a02      	ldr	r2, [pc, #8]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d6:	60d3      	str	r3, [r2, #12]
 80031d8:	e002      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4926      	ldr	r1, [pc, #152]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800320c:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a20      	ldr	r2, [pc, #128]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003232:	4918      	ldr	r1, [pc, #96]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003244:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d015      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800325c:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800325e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	490a      	ldr	r1, [pc, #40]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800327a:	d105      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003286:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003288:	7cbb      	ldrb	r3, [r7, #18]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fb4a 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fef8 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e054      	b.n	800340a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <HAL_TIM_Base_Start_IT+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338a:	d01d      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a22      	ldr	r2, [pc, #136]	@ (800341c <HAL_TIM_Base_Start_IT+0xd4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a21      	ldr	r2, [pc, #132]	@ (8003420 <HAL_TIM_Base_Start_IT+0xd8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003424 <HAL_TIM_Base_Start_IT+0xdc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003428 <HAL_TIM_Base_Start_IT+0xe0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_TIM_Base_Start_IT+0xe4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003430 <HAL_TIM_Base_Start_IT+0xe8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d115      	bne.n	80033f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_TIM_Base_Start_IT+0xec>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d015      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0xbe>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d011      	beq.n	8003406 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	e008      	b.n	8003406 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e000      	b.n	8003408 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40013400 	.word	0x40013400
 800342c:	40014000 	.word	0x40014000
 8003430:	40015000 	.word	0x40015000
 8003434:	00010007 	.word	0x00010007

08003438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e049      	b.n	80034de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f841 	bl	80034e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fe28 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_TIM_PWM_Start+0x24>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e03c      	b.n	800359a <HAL_TIM_PWM_Start+0x9e>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b04      	cmp	r3, #4
 8003524:	d109      	bne.n	800353a <HAL_TIM_PWM_Start+0x3e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e02f      	b.n	800359a <HAL_TIM_PWM_Start+0x9e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d109      	bne.n	8003554 <HAL_TIM_PWM_Start+0x58>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e022      	b.n	800359a <HAL_TIM_PWM_Start+0x9e>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d109      	bne.n	800356e <HAL_TIM_PWM_Start+0x72>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e015      	b.n	800359a <HAL_TIM_PWM_Start+0x9e>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d109      	bne.n	8003588 <HAL_TIM_PWM_Start+0x8c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e008      	b.n	800359a <HAL_TIM_PWM_Start+0x9e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0a6      	b.n	80036f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xb6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	e023      	b.n	80035fa <HAL_TIM_PWM_Start+0xfe>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xc6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c0:	e01b      	b.n	80035fa <HAL_TIM_PWM_Start+0xfe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xd6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d0:	e013      	b.n	80035fa <HAL_TIM_PWM_Start+0xfe>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xe6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035e0:	e00b      	b.n	80035fa <HAL_TIM_PWM_Start+0xfe>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xf6>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f0:	e003      	b.n	80035fa <HAL_TIM_PWM_Start+0xfe>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f001 f9dc 	bl	80049c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3a      	ldr	r2, [pc, #232]	@ (80036f8 <HAL_TIM_PWM_Start+0x1fc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_TIM_PWM_Start+0x148>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a39      	ldr	r2, [pc, #228]	@ (80036fc <HAL_TIM_PWM_Start+0x200>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_TIM_PWM_Start+0x148>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a37      	ldr	r2, [pc, #220]	@ (8003700 <HAL_TIM_PWM_Start+0x204>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_TIM_PWM_Start+0x148>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a36      	ldr	r2, [pc, #216]	@ (8003704 <HAL_TIM_PWM_Start+0x208>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_TIM_PWM_Start+0x148>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a34      	ldr	r2, [pc, #208]	@ (8003708 <HAL_TIM_PWM_Start+0x20c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_PWM_Start+0x148>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a33      	ldr	r2, [pc, #204]	@ (800370c <HAL_TIM_PWM_Start+0x210>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_TIM_PWM_Start+0x14c>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_TIM_PWM_Start+0x14e>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a25      	ldr	r2, [pc, #148]	@ (80036f8 <HAL_TIM_PWM_Start+0x1fc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d01d      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a26      	ldr	r2, [pc, #152]	@ (8003710 <HAL_TIM_PWM_Start+0x214>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_TIM_PWM_Start+0x218>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a23      	ldr	r2, [pc, #140]	@ (8003718 <HAL_TIM_PWM_Start+0x21c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	@ (80036fc <HAL_TIM_PWM_Start+0x200>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_TIM_PWM_Start+0x204>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_PWM_Start+0x1b2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_TIM_PWM_Start+0x210>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d115      	bne.n	80036da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b19      	ldr	r3, [pc, #100]	@ (800371c <HAL_TIM_PWM_Start+0x220>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d015      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1f0>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c6:	d011      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	e008      	b.n	80036ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e000      	b.n	80036ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40013400 	.word	0x40013400
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800
 800370c:	40015000 	.word	0x40015000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	00010007 	.word	0x00010007

08003720 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e097      	b.n	8003864 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe f93f 	bl	80019cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f000 fca9 	bl	80040cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	4313      	orrs	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037c0:	f023 030c 	bic.w	r3, r3, #12
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4313      	orrs	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	011a      	lsls	r2, r3, #4
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	031b      	lsls	r3, r3, #12
 80037f0:	4313      	orrs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4313      	orrs	r3, r2
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800387c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003884:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800388c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003894:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d110      	bne.n	80038be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d001      	beq.n	80038ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e069      	b.n	8003980 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038bc:	e031      	b.n	8003922 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d110      	bne.n	80038e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ca:	7b3b      	ldrb	r3, [r7, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d001      	beq.n	80038d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e055      	b.n	8003980 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038e4:	e01d      	b.n	8003922 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	7b7b      	ldrb	r3, [r7, #13]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f8:	7b3b      	ldrb	r3, [r7, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e03e      	b.n	8003980 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_TIM_Encoder_Start+0xc4>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d008      	beq.n	8003940 <HAL_TIM_Encoder_Start+0xd4>
 800392e:	e00f      	b.n	8003950 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f001 f841 	bl	80049c0 <TIM_CCxChannelCmd>
      break;
 800393e:	e016      	b.n	800396e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	2104      	movs	r1, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f001 f839 	bl	80049c0 <TIM_CCxChannelCmd>
      break;
 800394e:	e00e      	b.n	800396e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f831 	bl	80049c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	2104      	movs	r1, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f001 f82a 	bl	80049c0 <TIM_CCxChannelCmd>
      break;
 800396c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0202 	mvn.w	r2, #2
 80039bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fb5c 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb4e 	bl	800407c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fb5f 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0204 	mvn.w	r2, #4
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb36 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fb28 	bl	800407c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fb39 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d020      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0208 	mvn.w	r2, #8
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fb10 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fb02 	bl	800407c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb13 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0210 	mvn.w	r2, #16
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 faea 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fadc 	bl	800407c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 faed 	bl	80040a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0201 	mvn.w	r2, #1
 8003aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fc1c 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f001 f8a9 	bl	8004c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 f8a1 	bl	8004c88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 faa7 	bl	80040b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00c      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0220 	mvn.w	r2, #32
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f001 f869 	bl	8004c60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00c      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 f875 	bl	8004c9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 f86d 	bl	8004cb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00c      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f001 f865 	bl	8004cc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f001 f85d 	bl	8004cd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0ff      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b14      	cmp	r3, #20
 8003c52:	f200 80f0 	bhi.w	8003e36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c56:	a201      	add	r2, pc, #4	@ (adr r2, 8003c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003e37 	.word	0x08003e37
 8003c64:	08003e37 	.word	0x08003e37
 8003c68:	08003e37 	.word	0x08003e37
 8003c6c:	08003cf1 	.word	0x08003cf1
 8003c70:	08003e37 	.word	0x08003e37
 8003c74:	08003e37 	.word	0x08003e37
 8003c78:	08003e37 	.word	0x08003e37
 8003c7c:	08003d33 	.word	0x08003d33
 8003c80:	08003e37 	.word	0x08003e37
 8003c84:	08003e37 	.word	0x08003e37
 8003c88:	08003e37 	.word	0x08003e37
 8003c8c:	08003d73 	.word	0x08003d73
 8003c90:	08003e37 	.word	0x08003e37
 8003c94:	08003e37 	.word	0x08003e37
 8003c98:	08003e37 	.word	0x08003e37
 8003c9c:	08003db5 	.word	0x08003db5
 8003ca0:	08003e37 	.word	0x08003e37
 8003ca4:	08003e37 	.word	0x08003e37
 8003ca8:	08003e37 	.word	0x08003e37
 8003cac:	08003df5 	.word	0x08003df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fabc 	bl	8004234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0208 	orr.w	r2, r2, #8
 8003cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6999      	ldr	r1, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	619a      	str	r2, [r3, #24]
      break;
 8003cee:	e0a5      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fb36 	bl	8004368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]
      break;
 8003d30:	e084      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fba9 	bl	8004490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0208 	orr.w	r2, r2, #8
 8003d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0204 	bic.w	r2, r2, #4
 8003d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69d9      	ldr	r1, [r3, #28]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	61da      	str	r2, [r3, #28]
      break;
 8003d70:	e064      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fc1b 	bl	80045b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	021a      	lsls	r2, r3, #8
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	61da      	str	r2, [r3, #28]
      break;
 8003db2:	e043      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fc8e 	bl	80046dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003df2:	e023      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fcd8 	bl	80047b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e34:	e002      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
      break;
 8003e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIM_ConfigClockSource+0x1c>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0f6      	b.n	800405a <HAL_TIM_ConfigClockSource+0x20a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8004064 <HAL_TIM_ConfigClockSource+0x214>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f000 80c1 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003eac:	4a6d      	ldr	r2, [pc, #436]	@ (8004064 <HAL_TIM_ConfigClockSource+0x214>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f200 80c6 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eb4:	4a6c      	ldr	r2, [pc, #432]	@ (8004068 <HAL_TIM_ConfigClockSource+0x218>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f000 80b9 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8004068 <HAL_TIM_ConfigClockSource+0x218>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f200 80be 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ec4:	4a69      	ldr	r2, [pc, #420]	@ (800406c <HAL_TIM_ConfigClockSource+0x21c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f000 80b1 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003ecc:	4a67      	ldr	r2, [pc, #412]	@ (800406c <HAL_TIM_ConfigClockSource+0x21c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	f200 80b6 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ed4:	4a66      	ldr	r2, [pc, #408]	@ (8004070 <HAL_TIM_ConfigClockSource+0x220>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 80a9 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003edc:	4a64      	ldr	r2, [pc, #400]	@ (8004070 <HAL_TIM_ConfigClockSource+0x220>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f200 80ae 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ee4:	4a63      	ldr	r2, [pc, #396]	@ (8004074 <HAL_TIM_ConfigClockSource+0x224>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	f000 80a1 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003eec:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_TIM_ConfigClockSource+0x224>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f200 80a6 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ef4:	4a60      	ldr	r2, [pc, #384]	@ (8004078 <HAL_TIM_ConfigClockSource+0x228>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f000 8099 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003efc:	4a5e      	ldr	r2, [pc, #376]	@ (8004078 <HAL_TIM_ConfigClockSource+0x228>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f200 809e 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f08:	f000 8091 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f10:	f200 8096 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f18:	f000 8089 	beq.w	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f20:	f200 808e 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f28:	d03e      	beq.n	8003fa8 <HAL_TIM_ConfigClockSource+0x158>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2e:	f200 8087 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	f000 8086 	beq.w	8004046 <HAL_TIM_ConfigClockSource+0x1f6>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d87f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f40:	2b70      	cmp	r3, #112	@ 0x70
 8003f42:	d01a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x12a>
 8003f44:	2b70      	cmp	r3, #112	@ 0x70
 8003f46:	d87b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f48:	2b60      	cmp	r3, #96	@ 0x60
 8003f4a:	d050      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x19e>
 8003f4c:	2b60      	cmp	r3, #96	@ 0x60
 8003f4e:	d877      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f50:	2b50      	cmp	r3, #80	@ 0x50
 8003f52:	d03c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x17e>
 8003f54:	2b50      	cmp	r3, #80	@ 0x50
 8003f56:	d873      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f58:	2b40      	cmp	r3, #64	@ 0x40
 8003f5a:	d058      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x1be>
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d86f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f60:	2b30      	cmp	r3, #48	@ 0x30
 8003f62:	d064      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f64:	2b30      	cmp	r3, #48	@ 0x30
 8003f66:	d86b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d060      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d867      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d05a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x1de>
 8003f78:	e062      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	f000 fcf9 	bl	8004980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
      break;
 8003fa6:	e04f      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	f000 fce2 	bl	8004980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fca:	609a      	str	r2, [r3, #8]
      break;
 8003fcc:	e03c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fc54 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2150      	movs	r1, #80	@ 0x50
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fcad 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e02c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fc73 	bl	80048e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2160      	movs	r1, #96	@ 0x60
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc9d 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 800400c:	e01c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fc34 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fc8d 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 800402c:	e00c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fc84 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 800403e:	e003      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e000      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	00100070 	.word	0x00100070
 8004068:	00100060 	.word	0x00100060
 800406c:	00100050 	.word	0x00100050
 8004070:	00100040 	.word	0x00100040
 8004074:	00100030 	.word	0x00100030
 8004078:	00100020 	.word	0x00100020

0800407c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a4c      	ldr	r2, [pc, #304]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d017      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ea:	d013      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a49      	ldr	r2, [pc, #292]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a48      	ldr	r2, [pc, #288]	@ (8004218 <TIM_Base_SetConfig+0x14c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a47      	ldr	r2, [pc, #284]	@ (800421c <TIM_Base_SetConfig+0x150>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a46      	ldr	r2, [pc, #280]	@ (8004220 <TIM_Base_SetConfig+0x154>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a45      	ldr	r2, [pc, #276]	@ (8004224 <TIM_Base_SetConfig+0x158>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a39      	ldr	r2, [pc, #228]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a36      	ldr	r2, [pc, #216]	@ (8004214 <TIM_Base_SetConfig+0x148>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <TIM_Base_SetConfig+0x14c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a34      	ldr	r2, [pc, #208]	@ (800421c <TIM_Base_SetConfig+0x150>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a33      	ldr	r2, [pc, #204]	@ (8004220 <TIM_Base_SetConfig+0x154>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a33      	ldr	r2, [pc, #204]	@ (8004228 <TIM_Base_SetConfig+0x15c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a32      	ldr	r2, [pc, #200]	@ (800422c <TIM_Base_SetConfig+0x160>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a31      	ldr	r2, [pc, #196]	@ (8004230 <TIM_Base_SetConfig+0x164>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2c      	ldr	r2, [pc, #176]	@ (8004224 <TIM_Base_SetConfig+0x158>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a18      	ldr	r2, [pc, #96]	@ (8004210 <TIM_Base_SetConfig+0x144>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <TIM_Base_SetConfig+0x110>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004220 <TIM_Base_SetConfig+0x154>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00f      	beq.n	80041dc <TIM_Base_SetConfig+0x110>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1a      	ldr	r2, [pc, #104]	@ (8004228 <TIM_Base_SetConfig+0x15c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0x110>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a19      	ldr	r2, [pc, #100]	@ (800422c <TIM_Base_SetConfig+0x160>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0x110>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a18      	ldr	r2, [pc, #96]	@ (8004230 <TIM_Base_SetConfig+0x164>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0x110>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <TIM_Base_SetConfig+0x158>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d103      	bne.n	80041e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]
  }
}
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40015000 	.word	0x40015000
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 0201 	bic.w	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0302 	bic.w	r3, r3, #2
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <TIM_OC1_SetConfig+0x11c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <TIM_OC1_SetConfig+0x88>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a2f      	ldr	r2, [pc, #188]	@ (8004354 <TIM_OC1_SetConfig+0x120>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_OC1_SetConfig+0x88>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a2e      	ldr	r2, [pc, #184]	@ (8004358 <TIM_OC1_SetConfig+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_OC1_SetConfig+0x88>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2d      	ldr	r2, [pc, #180]	@ (800435c <TIM_OC1_SetConfig+0x128>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_OC1_SetConfig+0x88>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004360 <TIM_OC1_SetConfig+0x12c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC1_SetConfig+0x88>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004364 <TIM_OC1_SetConfig+0x130>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10c      	bne.n	80042d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0308 	bic.w	r3, r3, #8
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <TIM_OC1_SetConfig+0x11c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <TIM_OC1_SetConfig+0xd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <TIM_OC1_SetConfig+0x120>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_OC1_SetConfig+0xd2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <TIM_OC1_SetConfig+0x124>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_OC1_SetConfig+0xd2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	@ (800435c <TIM_OC1_SetConfig+0x128>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_OC1_SetConfig+0xd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	@ (8004360 <TIM_OC1_SetConfig+0x12c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC1_SetConfig+0xd2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	@ (8004364 <TIM_OC1_SetConfig+0x130>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d111      	bne.n	800432a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800430c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800
 8004364:	40015000 	.word	0x40015000

08004368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 0210 	bic.w	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0320 	bic.w	r3, r3, #32
 80043b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004478 <TIM_OC2_SetConfig+0x110>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_OC2_SetConfig+0x74>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a2b      	ldr	r2, [pc, #172]	@ (800447c <TIM_OC2_SetConfig+0x114>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC2_SetConfig+0x74>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004480 <TIM_OC2_SetConfig+0x118>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10d      	bne.n	80043f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004478 <TIM_OC2_SetConfig+0x110>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <TIM_OC2_SetConfig+0xc0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1e      	ldr	r2, [pc, #120]	@ (800447c <TIM_OC2_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_OC2_SetConfig+0xc0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <TIM_OC2_SetConfig+0x11c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC2_SetConfig+0xc0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <TIM_OC2_SetConfig+0x120>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC2_SetConfig+0xc0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <TIM_OC2_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC2_SetConfig+0xc0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <TIM_OC2_SetConfig+0x118>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d113      	bne.n	8004450 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800442e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40013400 	.word	0x40013400
 8004480:	40015000 	.word	0x40015000
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <TIM_OC3_SetConfig+0x10c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_OC3_SetConfig+0x72>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	@ (80045a0 <TIM_OC3_SetConfig+0x110>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0x72>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a29      	ldr	r2, [pc, #164]	@ (80045a4 <TIM_OC3_SetConfig+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10d      	bne.n	800451e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1e      	ldr	r2, [pc, #120]	@ (800459c <TIM_OC3_SetConfig+0x10c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <TIM_OC3_SetConfig+0xbe>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1d      	ldr	r2, [pc, #116]	@ (80045a0 <TIM_OC3_SetConfig+0x110>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00f      	beq.n	800454e <TIM_OC3_SetConfig+0xbe>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <TIM_OC3_SetConfig+0x118>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_OC3_SetConfig+0xbe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <TIM_OC3_SetConfig+0x11c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <TIM_OC3_SetConfig+0xbe>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1b      	ldr	r2, [pc, #108]	@ (80045b0 <TIM_OC3_SetConfig+0x120>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_OC3_SetConfig+0xbe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <TIM_OC3_SetConfig+0x114>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40013400 	.word	0x40013400
 80045a4:	40015000 	.word	0x40015000
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800

080045b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2c      	ldr	r2, [pc, #176]	@ (80046c4 <TIM_OC4_SetConfig+0x110>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_OC4_SetConfig+0x74>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <TIM_OC4_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_OC4_SetConfig+0x74>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <TIM_OC4_SetConfig+0x118>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d10d      	bne.n	8004644 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800462e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a1f      	ldr	r2, [pc, #124]	@ (80046c4 <TIM_OC4_SetConfig+0x110>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <TIM_OC4_SetConfig+0xc0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <TIM_OC4_SetConfig+0x114>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00f      	beq.n	8004674 <TIM_OC4_SetConfig+0xc0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a1e      	ldr	r2, [pc, #120]	@ (80046d0 <TIM_OC4_SetConfig+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_OC4_SetConfig+0xc0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <TIM_OC4_SetConfig+0x120>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_OC4_SetConfig+0xc0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <TIM_OC4_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_OC4_SetConfig+0xc0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	@ (80046cc <TIM_OC4_SetConfig+0x118>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d113      	bne.n	800469c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004682:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40013400 	.word	0x40013400
 80046cc:	40015000 	.word	0x40015000
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <TIM_OC5_SetConfig+0xbc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_OC5_SetConfig+0x82>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <TIM_OC5_SetConfig+0xc0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_OC5_SetConfig+0x82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <TIM_OC5_SetConfig+0xc4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_OC5_SetConfig+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <TIM_OC5_SetConfig+0xc8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_OC5_SetConfig+0x82>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a15      	ldr	r2, [pc, #84]	@ (80047a8 <TIM_OC5_SetConfig+0xcc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC5_SetConfig+0x82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a14      	ldr	r2, [pc, #80]	@ (80047ac <TIM_OC5_SetConfig+0xd0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d109      	bne.n	8004772 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	621a      	str	r2, [r3, #32]
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40013400 	.word	0x40013400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800
 80047ac:	40015000 	.word	0x40015000

080047b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	051b      	lsls	r3, r3, #20
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1a      	ldr	r2, [pc, #104]	@ (8004870 <TIM_OC6_SetConfig+0xc0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <TIM_OC6_SetConfig+0x84>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a19      	ldr	r2, [pc, #100]	@ (8004874 <TIM_OC6_SetConfig+0xc4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00f      	beq.n	8004834 <TIM_OC6_SetConfig+0x84>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a18      	ldr	r2, [pc, #96]	@ (8004878 <TIM_OC6_SetConfig+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_OC6_SetConfig+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a17      	ldr	r2, [pc, #92]	@ (800487c <TIM_OC6_SetConfig+0xcc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC6_SetConfig+0x84>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a16      	ldr	r2, [pc, #88]	@ (8004880 <TIM_OC6_SetConfig+0xd0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC6_SetConfig+0x84>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <TIM_OC6_SetConfig+0xd4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40013400 	.word	0x40013400
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800
 8004884:	40015000 	.word	0x40015000

08004888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 030a 	bic.w	r3, r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 0210 	bic.w	r2, r3, #16
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800495c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	f043 0307 	orr.w	r3, r3, #7
 800496c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800499a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e074      	b.n	8004b0e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a34      	ldr	r2, [pc, #208]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a31      	ldr	r2, [pc, #196]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a21      	ldr	r2, [pc, #132]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d022      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a15      	ldr	r2, [pc, #84]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a18      	ldr	r2, [pc, #96]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10c      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40015000 	.word	0x40015000
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800
 8004b30:	40000c00 	.word	0x40000c00
 8004b34:	40014000 	.word	0x40014000

08004b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e078      	b.n	8004c46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d11c      	bne.n	8004c34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	051b      	lsls	r3, r3, #20
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40015000 	.word	0x40015000

08004c60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e042      	b.n	8004d84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc fdc9 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	@ 0x24
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fb24 	bl	8005384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f825 	bl	8004d8c <UART_SetConfig>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e01b      	b.n	8004d84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fba3 	bl	80054c8 <UART_CheckIdleState>
 8004d82:	4603      	mov	r3, r0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d90:	b08c      	sub	sp, #48	@ 0x30
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4baa      	ldr	r3, [pc, #680]	@ (8005064 <UART_SetConfig+0x2d8>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a9f      	ldr	r2, [pc, #636]	@ (8005068 <UART_SetConfig+0x2dc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df4:	4313      	orrs	r3, r2
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	f023 010f 	bic.w	r1, r3, #15
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a90      	ldr	r2, [pc, #576]	@ (800506c <UART_SetConfig+0x2e0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d125      	bne.n	8004e7c <UART_SetConfig+0xf0>
 8004e30:	4b8f      	ldr	r3, [pc, #572]	@ (8005070 <UART_SetConfig+0x2e4>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d81a      	bhi.n	8004e74 <UART_SetConfig+0xe8>
 8004e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <UART_SetConfig+0xb8>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e65 	.word	0x08004e65
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e6d 	.word	0x08004e6d
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5a:	e116      	b.n	800508a <UART_SetConfig+0x2fe>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e62:	e112      	b.n	800508a <UART_SetConfig+0x2fe>
 8004e64:	2304      	movs	r3, #4
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6a:	e10e      	b.n	800508a <UART_SetConfig+0x2fe>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e72:	e10a      	b.n	800508a <UART_SetConfig+0x2fe>
 8004e74:	2310      	movs	r3, #16
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7a:	e106      	b.n	800508a <UART_SetConfig+0x2fe>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <UART_SetConfig+0x2e8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d138      	bne.n	8004ef8 <UART_SetConfig+0x16c>
 8004e86:	4b7a      	ldr	r3, [pc, #488]	@ (8005070 <UART_SetConfig+0x2e4>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d82d      	bhi.n	8004ef0 <UART_SetConfig+0x164>
 8004e94:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <UART_SetConfig+0x110>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004ef1 	.word	0x08004ef1
 8004ea8:	08004ef1 	.word	0x08004ef1
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ef1 	.word	0x08004ef1
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef1 	.word	0x08004ef1
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	08004ef1 	.word	0x08004ef1
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004ee9 	.word	0x08004ee9
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed6:	e0d8      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ede:	e0d4      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e0d0      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	e0cc      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef6:	e0c8      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5e      	ldr	r2, [pc, #376]	@ (8005078 <UART_SetConfig+0x2ec>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d125      	bne.n	8004f4e <UART_SetConfig+0x1c2>
 8004f02:	4b5b      	ldr	r3, [pc, #364]	@ (8005070 <UART_SetConfig+0x2e4>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f0c:	2b30      	cmp	r3, #48	@ 0x30
 8004f0e:	d016      	beq.n	8004f3e <UART_SetConfig+0x1b2>
 8004f10:	2b30      	cmp	r3, #48	@ 0x30
 8004f12:	d818      	bhi.n	8004f46 <UART_SetConfig+0x1ba>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d00a      	beq.n	8004f2e <UART_SetConfig+0x1a2>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d814      	bhi.n	8004f46 <UART_SetConfig+0x1ba>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <UART_SetConfig+0x19a>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d008      	beq.n	8004f36 <UART_SetConfig+0x1aa>
 8004f24:	e00f      	b.n	8004f46 <UART_SetConfig+0x1ba>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2c:	e0ad      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f34:	e0a9      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f36:	2304      	movs	r3, #4
 8004f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3c:	e0a5      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f44:	e0a1      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f46:	2310      	movs	r3, #16
 8004f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4c:	e09d      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4a      	ldr	r2, [pc, #296]	@ (800507c <UART_SetConfig+0x2f0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d125      	bne.n	8004fa4 <UART_SetConfig+0x218>
 8004f58:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <UART_SetConfig+0x2e4>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f64:	d016      	beq.n	8004f94 <UART_SetConfig+0x208>
 8004f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f68:	d818      	bhi.n	8004f9c <UART_SetConfig+0x210>
 8004f6a:	2b80      	cmp	r3, #128	@ 0x80
 8004f6c:	d00a      	beq.n	8004f84 <UART_SetConfig+0x1f8>
 8004f6e:	2b80      	cmp	r3, #128	@ 0x80
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x210>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <UART_SetConfig+0x1f0>
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d008      	beq.n	8004f8c <UART_SetConfig+0x200>
 8004f7a:	e00f      	b.n	8004f9c <UART_SetConfig+0x210>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e082      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e07e      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e07a      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f9a:	e076      	b.n	800508a <UART_SetConfig+0x2fe>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fa2:	e072      	b.n	800508a <UART_SetConfig+0x2fe>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a35      	ldr	r2, [pc, #212]	@ (8005080 <UART_SetConfig+0x2f4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d12a      	bne.n	8005004 <UART_SetConfig+0x278>
 8004fae:	4b30      	ldr	r3, [pc, #192]	@ (8005070 <UART_SetConfig+0x2e4>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fbc:	d01a      	beq.n	8004ff4 <UART_SetConfig+0x268>
 8004fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc2:	d81b      	bhi.n	8004ffc <UART_SetConfig+0x270>
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d00c      	beq.n	8004fe4 <UART_SetConfig+0x258>
 8004fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fce:	d815      	bhi.n	8004ffc <UART_SetConfig+0x270>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x250>
 8004fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fd8:	d008      	beq.n	8004fec <UART_SetConfig+0x260>
 8004fda:	e00f      	b.n	8004ffc <UART_SetConfig+0x270>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e052      	b.n	800508a <UART_SetConfig+0x2fe>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fea:	e04e      	b.n	800508a <UART_SetConfig+0x2fe>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e04a      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffa:	e046      	b.n	800508a <UART_SetConfig+0x2fe>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005002:	e042      	b.n	800508a <UART_SetConfig+0x2fe>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a17      	ldr	r2, [pc, #92]	@ (8005068 <UART_SetConfig+0x2dc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d13a      	bne.n	8005084 <UART_SetConfig+0x2f8>
 800500e:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <UART_SetConfig+0x2e4>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005018:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800501c:	d01a      	beq.n	8005054 <UART_SetConfig+0x2c8>
 800501e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005022:	d81b      	bhi.n	800505c <UART_SetConfig+0x2d0>
 8005024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005028:	d00c      	beq.n	8005044 <UART_SetConfig+0x2b8>
 800502a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502e:	d815      	bhi.n	800505c <UART_SetConfig+0x2d0>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <UART_SetConfig+0x2b0>
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005038:	d008      	beq.n	800504c <UART_SetConfig+0x2c0>
 800503a:	e00f      	b.n	800505c <UART_SetConfig+0x2d0>
 800503c:	2300      	movs	r3, #0
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e022      	b.n	800508a <UART_SetConfig+0x2fe>
 8005044:	2302      	movs	r3, #2
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e01e      	b.n	800508a <UART_SetConfig+0x2fe>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e01a      	b.n	800508a <UART_SetConfig+0x2fe>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e016      	b.n	800508a <UART_SetConfig+0x2fe>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e012      	b.n	800508a <UART_SetConfig+0x2fe>
 8005064:	cfff69f3 	.word	0xcfff69f3
 8005068:	40008000 	.word	0x40008000
 800506c:	40013800 	.word	0x40013800
 8005070:	40021000 	.word	0x40021000
 8005074:	40004400 	.word	0x40004400
 8005078:	40004800 	.word	0x40004800
 800507c:	40004c00 	.word	0x40004c00
 8005080:	40005000 	.word	0x40005000
 8005084:	2310      	movs	r3, #16
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4aae      	ldr	r2, [pc, #696]	@ (8005348 <UART_SetConfig+0x5bc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	f040 8097 	bne.w	80051c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800509a:	2b08      	cmp	r3, #8
 800509c:	d823      	bhi.n	80050e6 <UART_SetConfig+0x35a>
 800509e:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x318>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050e7 	.word	0x080050e7
 80050c4:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fd fe26 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80050cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b9e      	ldr	r3, [pc, #632]	@ (800534c <UART_SetConfig+0x5c0>)
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fd fdb1 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80050da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8130 	beq.w	800535a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	4a94      	ldr	r2, [pc, #592]	@ (8005350 <UART_SetConfig+0x5c4>)
 8005100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005104:	461a      	mov	r2, r3
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	fbb3 f3f2 	udiv	r3, r3, r2
 800510c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	429a      	cmp	r2, r3
 800511c:	d305      	bcc.n	800512a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	429a      	cmp	r2, r3
 8005128:	d903      	bls.n	8005132 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005130:	e113      	b.n	800535a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2200      	movs	r2, #0
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	4a84      	ldr	r2, [pc, #528]	@ (8005350 <UART_SetConfig+0x5c4>)
 8005140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005144:	b29b      	uxth	r3, r3
 8005146:	2200      	movs	r2, #0
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005154:	f7fb fc7e 	bl	8000a54 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	020b      	lsls	r3, r1, #8
 800516a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800516e:	0202      	lsls	r2, r0, #8
 8005170:	6979      	ldr	r1, [r7, #20]
 8005172:	6849      	ldr	r1, [r1, #4]
 8005174:	0849      	lsrs	r1, r1, #1
 8005176:	2000      	movs	r0, #0
 8005178:	460c      	mov	r4, r1
 800517a:	4605      	mov	r5, r0
 800517c:	eb12 0804 	adds.w	r8, r2, r4
 8005180:	eb43 0905 	adc.w	r9, r3, r5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	469a      	mov	sl, r3
 800518c:	4693      	mov	fp, r2
 800518e:	4652      	mov	r2, sl
 8005190:	465b      	mov	r3, fp
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fb fc5d 	bl	8000a54 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4613      	mov	r3, r2
 80051a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051a8:	d308      	bcc.n	80051bc <UART_SetConfig+0x430>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b0:	d204      	bcs.n	80051bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	e0ce      	b.n	800535a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051c2:	e0ca      	b.n	800535a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	d166      	bne.n	800529c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80051ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d827      	bhi.n	8005226 <UART_SetConfig+0x49a>
 80051d6:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <UART_SetConfig+0x450>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fd fd8a 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fd fd9c 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 800520c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b4e      	ldr	r3, [pc, #312]	@ (800534c <UART_SetConfig+0x5c0>)
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fd fd11 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 800521a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8090 	beq.w	800535a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	4a44      	ldr	r2, [pc, #272]	@ (8005350 <UART_SetConfig+0x5c4>)
 8005240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005244:	461a      	mov	r2, r3
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	fbb3 f3f2 	udiv	r3, r3, r2
 800524c:	005a      	lsls	r2, r3, #1
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	441a      	add	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d916      	bls.n	8005294 <UART_SetConfig+0x508>
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d212      	bcs.n	8005294 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	b29b      	uxth	r3, r3
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	b29a      	uxth	r2, r3
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	4313      	orrs	r3, r2
 8005288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	8bfa      	ldrh	r2, [r7, #30]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	e062      	b.n	800535a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800529a:	e05e      	b.n	800535a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d828      	bhi.n	80052f6 <UART_SetConfig+0x56a>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x520>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fd fd22 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80052d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052d6:	e014      	b.n	8005302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fd fd34 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80052dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b1a      	ldr	r3, [pc, #104]	@ (800534c <UART_SetConfig+0x5c0>)
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fd fca9 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80052ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005300:	bf00      	nop
    }

    if (pclk != 0U)
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d028      	beq.n	800535a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	4a10      	ldr	r2, [pc, #64]	@ (8005350 <UART_SetConfig+0x5c4>)
 800530e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005312:	461a      	mov	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	fbb3 f2f2 	udiv	r2, r3, r2
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	441a      	add	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d910      	bls.n	8005354 <UART_SetConfig+0x5c8>
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005338:	d20c      	bcs.n	8005354 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	b29a      	uxth	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	e009      	b.n	800535a <UART_SetConfig+0x5ce>
 8005346:	bf00      	nop
 8005348:	40008000 	.word	0x40008000
 800534c:	00f42400 	.word	0x00f42400
 8005350:	080063bc 	.word	0x080063bc
      }
      else
      {
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2201      	movs	r2, #1
 800535e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2201      	movs	r2, #1
 8005366:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005376:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800537a:	4618      	mov	r0, r3
 800537c:	3730      	adds	r7, #48	@ 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01a      	beq.n	800549a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005482:	d10a      	bne.n	800549a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b098      	sub	sp, #96	@ 0x60
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d8:	f7fc fbd4 	bl	8001c84 <HAL_GetTick>
 80054dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d12f      	bne.n	800554c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f4:	2200      	movs	r2, #0
 80054f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f88e 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d022      	beq.n	800554c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551a:	653b      	str	r3, [r7, #80]	@ 0x50
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005524:	647b      	str	r3, [r7, #68]	@ 0x44
 8005526:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800552a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e063      	b.n	8005614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b04      	cmp	r3, #4
 8005558:	d149      	bne.n	80055ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f857 	bl	800561c <UART_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d03c      	beq.n	80055ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	623b      	str	r3, [r7, #32]
   return(result);
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
 8005594:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e6      	bne.n	8005574 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69b9      	ldr	r1, [r7, #24]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	617b      	str	r3, [r7, #20]
   return(result);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e012      	b.n	8005614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3758      	adds	r7, #88	@ 0x58
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	e04f      	b.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d04b      	beq.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fc fb25 	bl	8001c84 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <UART_WaitOnFlagUntilTimeout+0x30>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e04e      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d037      	beq.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b80      	cmp	r3, #128	@ 0x80
 8005662:	d034      	beq.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d031      	beq.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d110      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2208      	movs	r2, #8
 800567e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f838 	bl	80056f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2208      	movs	r2, #8
 800568a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e029      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a8:	d111      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f81e 	bl	80056f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e00f      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4013      	ands	r3, r2
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	bf0c      	ite	eq
 80056de:	2301      	moveq	r3, #1
 80056e0:	2300      	movne	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d0a0      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b095      	sub	sp, #84	@ 0x54
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
 800571e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e6      	bne.n	80056fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800575a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e3      	bne.n	8005730 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d118      	bne.n	80057a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	60bb      	str	r3, [r7, #8]
   return(result);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0310 	bic.w	r3, r3, #16
 8005784:	647b      	str	r3, [r7, #68]	@ 0x44
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6979      	ldr	r1, [r7, #20]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	613b      	str	r3, [r7, #16]
   return(result);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e6      	bne.n	8005770 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057b6:	bf00      	nop
 80057b8:	3754      	adds	r7, #84	@ 0x54
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e027      	b.n	8005828 <HAL_UARTEx_DisableFifoMode+0x66>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2224      	movs	r2, #36	@ 0x24
 80057e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005806:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e02d      	b.n	80058a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2224      	movs	r2, #36	@ 0x24
 8005858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f84f 	bl	800592c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e02d      	b.n	8005924 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2224      	movs	r2, #36	@ 0x24
 80058d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f811 	bl	800592c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800594c:	e031      	b.n	80059b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800594e:	2308      	movs	r3, #8
 8005950:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005952:	2308      	movs	r3, #8
 8005954:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	0e5b      	lsrs	r3, r3, #25
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0f5b      	lsrs	r3, r3, #29
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	7b3a      	ldrb	r2, [r7, #12]
 800597a:	4911      	ldr	r1, [pc, #68]	@ (80059c0 <UARTEx_SetNbDataToProcess+0x94>)
 800597c:	5c8a      	ldrb	r2, [r1, r2]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005982:	7b3a      	ldrb	r2, [r7, #12]
 8005984:	490f      	ldr	r1, [pc, #60]	@ (80059c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005986:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005988:	fb93 f3f2 	sdiv	r3, r3, r2
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	7b7a      	ldrb	r2, [r7, #13]
 8005998:	4909      	ldr	r1, [pc, #36]	@ (80059c0 <UARTEx_SetNbDataToProcess+0x94>)
 800599a:	5c8a      	ldrb	r2, [r1, r2]
 800599c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059a0:	7b7a      	ldrb	r2, [r7, #13]
 80059a2:	4908      	ldr	r1, [pc, #32]	@ (80059c4 <UARTEx_SetNbDataToProcess+0x98>)
 80059a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	080063d4 	.word	0x080063d4
 80059c4:	080063dc 	.word	0x080063dc

080059c8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b08b      	sub	sp, #44	@ 0x2c
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	885b      	ldrh	r3, [r3, #2]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80059fa:	e013      	b.n	8005a24 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	1d1a      	adds	r2, r3, #4
 8005a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a02:	ed93 7a00 	vldr	s14, [r3]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	623a      	str	r2, [r7, #32]
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	61fa      	str	r2, [r7, #28]
 8005a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a1a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e8      	bne.n	80059fc <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8005a2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	372c      	adds	r7, #44	@ 0x2c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	817b      	strh	r3, [r7, #10]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	897a      	ldrh	r2, [r7, #10]
 8005a54:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	893a      	ldrh	r2, [r7, #8]
 8005a5a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	605a      	str	r2, [r3, #4]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b0bb      	sub	sp, #236	@ 0xec
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	885b      	ldrh	r3, [r3, #2]
 8005a8e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8005aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8005ab0:	e03b      	b.n	8005b2a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8005ab2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005abe:	e00c      	b.n	8005ada <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac4:	1d1a      	adds	r2, r3, #4
 8005ac6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
        j--;
 8005ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1ee      	bne.n	8005ac0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	1d1a      	adds	r2, r3, #4
 8005ae8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005aec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005af0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8005af2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005af6:	3b01      	subs	r3, #1
 8005af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005afc:	e00c      	b.n	8005b18 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
        j--;
 8005b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b12:	3b01      	subs	r3, #1
 8005b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8005b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ee      	bne.n	8005afe <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8005b20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005b24:	3b01      	subs	r3, #1
 8005b26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8005b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1bf      	bne.n	8005ab2 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b38:	e2c7      	b.n	80060ca <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8005b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b3e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	885b      	ldrh	r3, [r3, #2]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8005b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b70:	3301      	adds	r3, #1
 8005b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b76:	e02c      	b.n	8005bd2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	885b      	ldrh	r3, [r3, #2]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	fb03 f101 	mul.w	r1, r3, r1
 8005b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b8e:	440b      	add	r3, r1
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8005b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8005ba0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005ba4:	eeb0 7ae7 	vabs.f32	s14, s15
 8005ba8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005bac:	eef0 7ae7 	vabs.f32	s15, s15
 8005bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	dd06      	ble.n	8005bc8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8005bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bcc:	3301      	adds	r3, #1
 8005bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bd2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3cd      	bcc.n	8005b78 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8005bdc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005be0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	f000 809b 	beq.w	8005d22 <arm_mat_inverse_f32+0x2b4>
 8005bec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	f000 8094 	beq.w	8005d22 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	885b      	ldrh	r3, [r3, #2]
 8005c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c1e:	fb03 f202 	mul.w	r2, r3, r2
 8005c22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c2e:	4413      	add	r3, r2
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c3a:	fb03 f202 	mul.w	r2, r3, r2
 8005c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c56:	e018      	b.n	8005c8a <arm_mat_inverse_f32+0x21c>
 8005c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8005c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c76:	1d1a      	adds	r2, r3, #4
 8005c78:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005c84:	3301      	adds	r3, #1
 8005c86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c90:	429a      	cmp	r2, r3
 8005c92:	dbe1      	blt.n	8005c58 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	885b      	ldrh	r3, [r3, #2]
 8005ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cde:	e018      	b.n	8005d12 <arm_mat_inverse_f32+0x2a4>
 8005ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	dbe1      	blt.n	8005ce0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8005d22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d009      	beq.n	8005d3e <arm_mat_inverse_f32+0x2d0>
 8005d2a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d102      	bne.n	8005d3e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8005d38:	f06f 0304 	mvn.w	r3, #4
 8005d3c:	e208      	b.n	8006150 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8005d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d42:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	885b      	ldrh	r3, [r3, #2]
 8005d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d6a:	fb03 f202 	mul.w	r2, r3, r2
 8005d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d86:	e011      	b.n	8005dac <arm_mat_inverse_f32+0x33e>
 8005d88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8005d92:	ed93 7a00 	vldr	s14, [r3]
 8005d96:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc3 7a00 	vstr	s15, [r3]
 8005da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005da6:	3301      	adds	r3, #1
 8005da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005dac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	429a      	cmp	r2, r3
 8005db4:	dbe8      	blt.n	8005d88 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005de2:	e011      	b.n	8005e08 <arm_mat_inverse_f32+0x39a>
 8005de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8005dee:	ed93 7a00 	vldr	s14, [r3]
 8005df2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc3 7a00 	vstr	s15, [r3]
 8005dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e02:	3301      	adds	r3, #1
 8005e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e08:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	dbe8      	blt.n	8005de4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8005e18:	e0ae      	b.n	8005f78 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	885b      	ldrh	r3, [r3, #2]
 8005e22:	4619      	mov	r1, r3
 8005e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e28:	fb03 f101 	mul.w	r1, r3, r1
 8005e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e30:	440b      	add	r3, r1
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	885b      	ldrh	r3, [r3, #2]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005e6a:	fb03 f202 	mul.w	r2, r3, r2
 8005e6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e84:	fb03 f202 	mul.w	r2, r3, r2
 8005e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005e94:	4413      	add	r3, r2
 8005e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ea0:	e01a      	b.n	8005ed8 <arm_mat_inverse_f32+0x46a>
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005eac:	ed93 7a00 	vldr	s14, [r3]
 8005eb0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005ec2:	ed93 7a00 	vldr	s14, [r3]
 8005ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eca:	edc3 7a00 	vstr	s15, [r3]
 8005ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ed8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	dbdf      	blt.n	8005ea2 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f20:	4413      	add	r3, r2
 8005f22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f26:	2300      	movs	r3, #0
 8005f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f2c:	e01a      	b.n	8005f64 <arm_mat_inverse_f32+0x4f6>
 8005f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f38:	ed93 7a00 	vldr	s14, [r3]
 8005f3c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8005f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005f4e:	ed93 7a00 	vldr	s14, [r3]
 8005f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f56:	edc3 7a00 	vstr	s15, [r3]
 8005f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	dbdf      	blt.n	8005f2e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8005f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f78:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	f4ff af4b 	bcc.w	8005e1a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f8c:	e092      	b.n	80060b4 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	4619      	mov	r1, r3
 8005f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f9c:	fb03 f101 	mul.w	r1, r3, r1
 8005fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fa4:	440b      	add	r3, r1
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8005fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	885b      	ldrh	r3, [r3, #2]
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	623b      	str	r3, [r7, #32]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8005fda:	fb03 f202 	mul.w	r2, r3, r2
 8005fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005fe8:	4413      	add	r3, r2
 8005fea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ff0:	fb03 f202 	mul.w	r2, r3, r2
 8005ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ffe:	4413      	add	r3, r2
 8006000:	677b      	str	r3, [r7, #116]	@ 0x74
 8006002:	2300      	movs	r3, #0
 8006004:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006006:	e014      	b.n	8006032 <arm_mat_inverse_f32+0x5c4>
 8006008:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	677a      	str	r2, [r7, #116]	@ 0x74
 800600e:	ed93 7a00 	vldr	s14, [r3]
 8006012:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006020:	ed93 7a00 	vldr	s14, [r3]
 8006024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006028:	edc3 7a00 	vstr	s15, [r3]
 800602c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800602e:	3301      	adds	r3, #1
 8006030:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006032:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	429a      	cmp	r2, r3
 8006038:	dbe6      	blt.n	8006008 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800605e:	4413      	add	r3, r2
 8006060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800606e:	4413      	add	r3, r2
 8006070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006072:	2300      	movs	r3, #0
 8006074:	673b      	str	r3, [r7, #112]	@ 0x70
 8006076:	e014      	b.n	80060a2 <arm_mat_inverse_f32+0x634>
 8006078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800607e:	ed93 7a00 	vldr	s14, [r3]
 8006082:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800608c:	1d1a      	adds	r2, r3, #4
 800608e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006090:	ed93 7a00 	vldr	s14, [r3]
 8006094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006098:	edc3 7a00 	vstr	s15, [r3]
 800609c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800609e:	3301      	adds	r3, #1
 80060a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80060a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	dbe6      	blt.n	8006078 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80060aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ae:	3301      	adds	r3, #1
 80060b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80060b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f4ff af67 	bcc.w	8005f8e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80060c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d0:	429a      	cmp	r2, r3
 80060d2:	f4ff ad32 	bcc.w	8005b3a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80060dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d033      	beq.n	800614c <arm_mat_inverse_f32+0x6de>
 80060e4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80060e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80060ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f0:	d12c      	bne.n	800614c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060fe:	e010      	b.n	8006122 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8006100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006108:	4413      	add	r3, r2
 800610a:	edd3 7a00 	vldr	s15, [r3]
 800610e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006116:	d10d      	bne.n	8006134 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8006118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800611c:	3301      	adds	r3, #1
 800611e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800612e:	429a      	cmp	r2, r3
 8006130:	d3e6      	bcc.n	8006100 <arm_mat_inverse_f32+0x692>
 8006132:	e000      	b.n	8006136 <arm_mat_inverse_f32+0x6c8>
            break;
 8006134:	bf00      	nop
      }

      if (i == numRows * numCols)
 8006136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006138:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8006142:	429a      	cmp	r2, r3
 8006144:	d102      	bne.n	800614c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8006146:	23fb      	movs	r3, #251	@ 0xfb
 8006148:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800614c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8006150:	4618      	mov	r0, r3
 8006152:	37ec      	adds	r7, #236	@ 0xec
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800615c:	b480      	push	{r7}
 800615e:	b093      	sub	sp, #76	@ 0x4c
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	885b      	ldrh	r3, [r3, #2]
 8006196:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8006198:	2300      	movs	r3, #0
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800619c:	8b7b      	ldrh	r3, [r7, #26]
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	4413      	add	r3, r2
 80061a8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80061aa:	8b3b      	ldrh	r3, [r7, #24]
 80061ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80061ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061bc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80061be:	8afb      	ldrh	r3, [r7, #22]
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80061c2:	e017      	b.n	80061f4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80061c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	647a      	str	r2, [r7, #68]	@ 0x44
 80061ca:	ed93 7a00 	vldr	s14, [r3]
 80061ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d0:	edd3 7a00 	vldr	s15, [r3]
 80061d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80061dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061e0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80061e4:	8b3b      	ldrh	r3, [r7, #24]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ea:	4413      	add	r3, r2
 80061ec:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	3b01      	subs	r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e4      	bne.n	80061c4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006202:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	3b01      	subs	r3, #1
 8006208:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800620a:	8b3a      	ldrh	r2, [r7, #24]
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	4413      	add	r3, r2
 8006216:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ca      	bne.n	80061b4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800621e:	8b3b      	ldrh	r3, [r7, #24]
 8006220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006222:	4413      	add	r3, r2
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8006226:	8afb      	ldrh	r3, [r7, #22]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800622c:	4413      	add	r3, r2
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	3b01      	subs	r3, #1
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1b1      	bne.n	80061a0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800623c:	2300      	movs	r3, #0
 800623e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8006240:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8006244:	4618      	mov	r0, r3
 8006246:	374c      	adds	r7, #76	@ 0x4c
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8006250:	b480      	push	{r7}
 8006252:	b08b      	sub	sp, #44	@ 0x2c
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	ed87 0a02 	vstr	s0, [r7, #8]
 800625c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	885b      	ldrh	r3, [r3, #2]
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800627e:	e010      	b.n	80062a2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	627a      	str	r2, [r7, #36]	@ 0x24
 8006286:	ed93 7a00 	vldr	s14, [r3]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	623a      	str	r2, [r7, #32]
 8006290:	edd7 7a02 	vldr	s15, [r7, #8]
 8006294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006298:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	3b01      	subs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1eb      	bne.n	8006280 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80062a8:	2300      	movs	r3, #0
 80062aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80062ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	372c      	adds	r7, #44	@ 0x2c
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80062bc:	b480      	push	{r7}
 80062be:	b08b      	sub	sp, #44	@ 0x2c
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	885b      	ldrh	r3, [r3, #2]
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80062ee:	e013      	b.n	8006318 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	1d1a      	adds	r2, r3, #4
 80062f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062f6:	ed93 7a00 	vldr	s14, [r3]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	623a      	str	r2, [r7, #32]
 8006300:	edd3 7a00 	vldr	s15, [r3]
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	61fa      	str	r2, [r7, #28]
 800630a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800630e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3b01      	subs	r3, #1
 8006316:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e8      	bne.n	80062f0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800631e:	2300      	movs	r3, #0
 8006320:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8006322:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006326:	4618      	mov	r0, r3
 8006328:	372c      	adds	r7, #44	@ 0x2c
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <memset>:
 8006332:	4402      	add	r2, r0
 8006334:	4603      	mov	r3, r0
 8006336:	4293      	cmp	r3, r2
 8006338:	d100      	bne.n	800633c <memset+0xa>
 800633a:	4770      	bx	lr
 800633c:	f803 1b01 	strb.w	r1, [r3], #1
 8006340:	e7f9      	b.n	8006336 <memset+0x4>
	...

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	@ (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	@ (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	@ (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	@ (8006388 <__libc_init_array+0x44>)
 8006358:	f000 f818 	bl	800638c <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	080063ec 	.word	0x080063ec
 8006380:	080063ec 	.word	0x080063ec
 8006384:	080063ec 	.word	0x080063ec
 8006388:	080063f0 	.word	0x080063f0

0800638c <_init>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

08006398 <_fini>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr
